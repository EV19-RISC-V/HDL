
typedef unsigned char 		byte;
typedef unsigned short 		word;
typedef unsigned int 		dword;
typedef int 				bool;
typedef signed char 		int8_t;
typedef unsigned char 		uint8_t;
typedef signed short int 	int16_t;
typedef unsigned short int 	uint16_t;
typedef signed int 			int32_t;
typedef unsigned int 		uint32_t;
typedef unsigned long long 	uint64_t;
typedef long long 			int64_t;
typedef unsigned char 		uchar_t;


#define WIDTH 200
#define HEIGHT 150
#define NITER 10

// Fixed point
#define SHIFT_AMOUNT 16 // 2^16 = 65536
#define SHIFT_MASK                                                             \
  ((1 << SHIFT_AMOUNT) - 1) // 65535 (all LSB set, all MSB clear)
#define Q16(a) (int32_t)((uint32_t)(a) << SHIFT_AMOUNT)
#define Q16_FRAC(num, den) (Q16(num) / den)
#define Q16_WHOLE(a) (int32_t)(((a)) >> SHIFT_AMOUNT)
#define Q16_FRACTIONAL(a) ((a) & SHIFT_MASK)
#define Q16_MUL(a, b) (((uint64_t)a * (uint64_t)b) / (1 << SHIFT_AMOUNT))

#define Q16_TO_DOUBLE(n)(double)(Q16_WHOLE(n)+((double)(n&SHIFT_MASK)/(1<<SHIFT_AMOUNT)))
#define RED_MASK 0b1111100000000000
#define GREEN_MASK 0b0000011111100000
#define BLUE_MASK 0b0000000000011111
#define RGB16(r, g, b)                                                         \
  (uint16_t)(((r << 11) & RED_MASK) + ((g << 5) & GREEN_MASK) +                \
             ((b << 0) & BLUE_MASK))

#define PIXEL_BUFFER_BASE  (0x05000000)
#define SDRAM_BASE		   (0x04000000)
#define LEDS_BASE		   (0x01001000)

int main()
{

/*	uint8_t * FIBO = (uint8_t*)SDRAM_BASE;
	FIBO[0]=0;
	FIBO[1]=1;
	for(int i=2;i<12; i++)
	{
		FIBO[i] = FIBO[i-1]+FIBO[i-2];
	}
	volatile uint8_t * LEDS = (uint8_t *)LEDS_BASE;
	while(1)
	{
	for(int i=0;i<12; i++)
	{
		(*LEDS) = FIBO[i];
		int delay = 50000;
		while(delay--)
			asm("");
	}
*/

    uint16_t (*screen)[WIDTH] = (uint16_t(*)[WIDTH])PIXEL_BUFFER_BASE;

    const int32_t x0 = Q16_FRAC(-2,1);
    const int32_t x1 = Q16_FRAC(1,1);
    const int32_t y0 = Q16_FRAC(-3,2);
    const int32_t y1 = Q16_FRAC(3,2);

    const int32_t imagStep = (y1-y0)/HEIGHT;
    const int32_t realStep = (x1-x0)/WIDTH;

    for (int i = 0; i < HEIGHT; i++)
    {
        int32_t imagC = y1 - imagStep * i;

        for (int j = 0; j < WIDTH; j++)
        {
        	(*LEDS) = (1<<((((i+1)*WIDTH+j+1)*8)/(HEIGHT*WIDTH)))-1;

            int32_t realC = x0 + realStep * j;
            int32_t realZ = 0;
            int32_t imagZ = 0;


            uint32_t nIter;
            for (nIter = 0; nIter < NITER; nIter++)
            {
                // z = z^2 + c
                realZ = Q16_MUL(realZ, realZ) - Q16_MUL(imagZ,imagZ) + realC;
                imagZ = 2 * Q16_MUL(realZ,imagZ) + imagC;

                 if (Q16_WHOLE(Q16_MUL(realZ, realZ) + Q16_MUL(imagZ, imagZ)) > 4)
                   break;
            }

            if(nIter < NITER)
                screen[i][j] = RGB16(0,0,0);
            else
                screen[i][j] = RGB16(30,0,0);

        }

    }

	}

  return 0;
}
