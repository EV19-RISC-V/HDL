// EV19_SoC_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module EV19_SoC_mm_interconnect_0 (
		input  wire        PLL_c0_clk,                                      //                                  PLL_c0.clk
		input  wire        EV19_Core_0_reset_reset_bridge_in_reset_reset,   // EV19_Core_0_reset_reset_bridge_in_reset.reset
		input  wire        VGA_sys_reset_reset_bridge_in_reset_reset,       //     VGA_sys_reset_reset_bridge_in_reset.reset
		input  wire [31:0] EV19_Core_0_Data_Master_address,                 //                 EV19_Core_0_Data_Master.address
		output wire        EV19_Core_0_Data_Master_waitrequest,             //                                        .waitrequest
		input  wire [3:0]  EV19_Core_0_Data_Master_byteenable,              //                                        .byteenable
		input  wire        EV19_Core_0_Data_Master_read,                    //                                        .read
		output wire [31:0] EV19_Core_0_Data_Master_readdata,                //                                        .readdata
		input  wire        EV19_Core_0_Data_Master_write,                   //                                        .write
		input  wire [31:0] EV19_Core_0_Data_Master_writedata,               //                                        .writedata
		input  wire [31:0] EV19_Core_0_Instruction_Master_address,          //          EV19_Core_0_Instruction_Master.address
		output wire        EV19_Core_0_Instruction_Master_waitrequest,      //                                        .waitrequest
		input  wire [3:0]  EV19_Core_0_Instruction_Master_byteenable,       //                                        .byteenable
		input  wire        EV19_Core_0_Instruction_Master_read,             //                                        .read
		output wire [31:0] EV19_Core_0_Instruction_Master_readdata,         //                                        .readdata
		input  wire [31:0] VGA_pixel_buffer_master_address,                 //                 VGA_pixel_buffer_master.address
		output wire        VGA_pixel_buffer_master_waitrequest,             //                                        .waitrequest
		input  wire        VGA_pixel_buffer_master_read,                    //                                        .read
		output wire [15:0] VGA_pixel_buffer_master_readdata,                //                                        .readdata
		output wire        VGA_pixel_buffer_master_readdatavalid,           //                                        .readdatavalid
		input  wire        VGA_pixel_buffer_master_lock,                    //                                        .lock
		output wire [2:0]  ADC_adc_slave_address,                           //                           ADC_adc_slave.address
		output wire        ADC_adc_slave_write,                             //                                        .write
		output wire        ADC_adc_slave_read,                              //                                        .read
		input  wire [31:0] ADC_adc_slave_readdata,                          //                                        .readdata
		output wire [31:0] ADC_adc_slave_writedata,                         //                                        .writedata
		input  wire        ADC_adc_slave_waitrequest,                       //                                        .waitrequest
		output wire [1:0]  Dip_Switch_s1_address,                           //                           Dip_Switch_s1.address
		input  wire [31:0] Dip_Switch_s1_readdata,                          //                                        .readdata
		output wire [0:0]  ID_control_slave_address,                        //                        ID_control_slave.address
		input  wire [31:0] ID_control_slave_readdata,                       //                                        .readdata
		output wire [0:0]  Keyboard_avalon_ps2_slave_address,               //               Keyboard_avalon_ps2_slave.address
		output wire        Keyboard_avalon_ps2_slave_write,                 //                                        .write
		output wire        Keyboard_avalon_ps2_slave_read,                  //                                        .read
		input  wire [31:0] Keyboard_avalon_ps2_slave_readdata,              //                                        .readdata
		output wire [31:0] Keyboard_avalon_ps2_slave_writedata,             //                                        .writedata
		output wire [3:0]  Keyboard_avalon_ps2_slave_byteenable,            //                                        .byteenable
		input  wire        Keyboard_avalon_ps2_slave_waitrequest,           //                                        .waitrequest
		output wire        Keyboard_avalon_ps2_slave_chipselect,            //                                        .chipselect
		output wire [2:0]  LEDs_s1_address,                                 //                                 LEDs_s1.address
		output wire        LEDs_s1_write,                                   //                                        .write
		input  wire [31:0] LEDs_s1_readdata,                                //                                        .readdata
		output wire [31:0] LEDs_s1_writedata,                               //                                        .writedata
		output wire        LEDs_s1_chipselect,                              //                                        .chipselect
		output wire [3:0]  Performance_Counter_control_slave_address,       //       Performance_Counter_control_slave.address
		output wire        Performance_Counter_control_slave_write,         //                                        .write
		input  wire [31:0] Performance_Counter_control_slave_readdata,      //                                        .readdata
		output wire [31:0] Performance_Counter_control_slave_writedata,     //                                        .writedata
		output wire        Performance_Counter_control_slave_begintransfer, //                                        .begintransfer
		output wire [1:0]  PLL_pll_slave_address,                           //                           PLL_pll_slave.address
		output wire        PLL_pll_slave_write,                             //                                        .write
		output wire        PLL_pll_slave_read,                              //                                        .read
		input  wire [31:0] PLL_pll_slave_readdata,                          //                                        .readdata
		output wire [31:0] PLL_pll_slave_writedata,                         //                                        .writedata
		output wire [1:0]  Push_Button_s1_address,                          //                          Push_Button_s1.address
		input  wire [31:0] Push_Button_s1_readdata,                         //                                        .readdata
		output wire [9:0]  RAM_s1_address,                                  //                                  RAM_s1.address
		output wire        RAM_s1_write,                                    //                                        .write
		input  wire [31:0] RAM_s1_readdata,                                 //                                        .readdata
		output wire [31:0] RAM_s1_writedata,                                //                                        .writedata
		output wire [3:0]  RAM_s1_byteenable,                               //                                        .byteenable
		output wire        RAM_s1_chipselect,                               //                                        .chipselect
		output wire        RAM_s1_clken,                                    //                                        .clken
		output wire [11:0] ROM_s1_address,                                  //                                  ROM_s1.address
		output wire        ROM_s1_write,                                    //                                        .write
		input  wire [31:0] ROM_s1_readdata,                                 //                                        .readdata
		output wire [31:0] ROM_s1_writedata,                                //                                        .writedata
		output wire [3:0]  ROM_s1_byteenable,                               //                                        .byteenable
		output wire        ROM_s1_chipselect,                               //                                        .chipselect
		output wire        ROM_s1_clken,                                    //                                        .clken
		output wire        ROM_s1_debugaccess,                              //                                        .debugaccess
		output wire [23:0] SDRAM_s1_address,                                //                                SDRAM_s1.address
		output wire        SDRAM_s1_write,                                  //                                        .write
		output wire        SDRAM_s1_read,                                   //                                        .read
		input  wire [15:0] SDRAM_s1_readdata,                               //                                        .readdata
		output wire [15:0] SDRAM_s1_writedata,                              //                                        .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                             //                                        .byteenable
		input  wire        SDRAM_s1_readdatavalid,                          //                                        .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                            //                                        .waitrequest
		output wire        SDRAM_s1_chipselect,                             //                                        .chipselect
		output wire [2:0]  Timer_s1_address,                                //                                Timer_s1.address
		output wire        Timer_s1_write,                                  //                                        .write
		input  wire [15:0] Timer_s1_readdata,                               //                                        .readdata
		output wire [15:0] Timer_s1_writedata,                              //                                        .writedata
		output wire        Timer_s1_chipselect,                             //                                        .chipselect
		output wire [0:0]  VGA_char_buffer_control_slave_address,           //           VGA_char_buffer_control_slave.address
		output wire        VGA_char_buffer_control_slave_write,             //                                        .write
		output wire        VGA_char_buffer_control_slave_read,              //                                        .read
		input  wire [31:0] VGA_char_buffer_control_slave_readdata,          //                                        .readdata
		output wire [31:0] VGA_char_buffer_control_slave_writedata,         //                                        .writedata
		output wire [3:0]  VGA_char_buffer_control_slave_byteenable,        //                                        .byteenable
		output wire        VGA_char_buffer_control_slave_chipselect,        //                                        .chipselect
		output wire [12:0] VGA_char_buffersource_slave_address,             //             VGA_char_buffersource_slave.address
		output wire        VGA_char_buffersource_slave_write,               //                                        .write
		output wire        VGA_char_buffersource_slave_read,                //                                        .read
		input  wire [7:0]  VGA_char_buffersource_slave_readdata,            //                                        .readdata
		output wire [7:0]  VGA_char_buffersource_slave_writedata,           //                                        .writedata
		output wire [0:0]  VGA_char_buffersource_slave_byteenable,          //                                        .byteenable
		input  wire        VGA_char_buffersource_slave_waitrequest,         //                                        .waitrequest
		output wire        VGA_char_buffersource_slave_chipselect,          //                                        .chipselect
		output wire [1:0]  VGA_pixel_buffer_slave_address,                  //                  VGA_pixel_buffer_slave.address
		output wire        VGA_pixel_buffer_slave_write,                    //                                        .write
		output wire        VGA_pixel_buffer_slave_read,                     //                                        .read
		input  wire [31:0] VGA_pixel_buffer_slave_readdata,                 //                                        .readdata
		output wire [31:0] VGA_pixel_buffer_slave_writedata,                //                                        .writedata
		output wire [3:0]  VGA_pixel_buffer_slave_byteenable,               //                                        .byteenable
		output wire        VGA_rgb_resampler_slave_read,                    //                 VGA_rgb_resampler_slave.read
		input  wire [31:0] VGA_rgb_resampler_slave_readdata                 //                                        .readdata
	);

	wire          ev19_core_0_data_master_translator_avalon_universal_master_0_waitrequest;                   // EV19_Core_0_Data_Master_agent:av_waitrequest -> EV19_Core_0_Data_Master_translator:uav_waitrequest
	wire   [31:0] ev19_core_0_data_master_translator_avalon_universal_master_0_readdata;                      // EV19_Core_0_Data_Master_agent:av_readdata -> EV19_Core_0_Data_Master_translator:uav_readdata
	wire          ev19_core_0_data_master_translator_avalon_universal_master_0_debugaccess;                   // EV19_Core_0_Data_Master_translator:uav_debugaccess -> EV19_Core_0_Data_Master_agent:av_debugaccess
	wire   [31:0] ev19_core_0_data_master_translator_avalon_universal_master_0_address;                       // EV19_Core_0_Data_Master_translator:uav_address -> EV19_Core_0_Data_Master_agent:av_address
	wire          ev19_core_0_data_master_translator_avalon_universal_master_0_read;                          // EV19_Core_0_Data_Master_translator:uav_read -> EV19_Core_0_Data_Master_agent:av_read
	wire    [3:0] ev19_core_0_data_master_translator_avalon_universal_master_0_byteenable;                    // EV19_Core_0_Data_Master_translator:uav_byteenable -> EV19_Core_0_Data_Master_agent:av_byteenable
	wire          ev19_core_0_data_master_translator_avalon_universal_master_0_readdatavalid;                 // EV19_Core_0_Data_Master_agent:av_readdatavalid -> EV19_Core_0_Data_Master_translator:uav_readdatavalid
	wire          ev19_core_0_data_master_translator_avalon_universal_master_0_lock;                          // EV19_Core_0_Data_Master_translator:uav_lock -> EV19_Core_0_Data_Master_agent:av_lock
	wire          ev19_core_0_data_master_translator_avalon_universal_master_0_write;                         // EV19_Core_0_Data_Master_translator:uav_write -> EV19_Core_0_Data_Master_agent:av_write
	wire   [31:0] ev19_core_0_data_master_translator_avalon_universal_master_0_writedata;                     // EV19_Core_0_Data_Master_translator:uav_writedata -> EV19_Core_0_Data_Master_agent:av_writedata
	wire    [2:0] ev19_core_0_data_master_translator_avalon_universal_master_0_burstcount;                    // EV19_Core_0_Data_Master_translator:uav_burstcount -> EV19_Core_0_Data_Master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                          // rsp_mux:src_valid -> EV19_Core_0_Data_Master_agent:rp_valid
	wire  [107:0] rsp_mux_src_data;                                                                           // rsp_mux:src_data -> EV19_Core_0_Data_Master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                          // EV19_Core_0_Data_Master_agent:rp_ready -> rsp_mux:src_ready
	wire   [15:0] rsp_mux_src_channel;                                                                        // rsp_mux:src_channel -> EV19_Core_0_Data_Master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                  // rsp_mux:src_startofpacket -> EV19_Core_0_Data_Master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                    // rsp_mux:src_endofpacket -> EV19_Core_0_Data_Master_agent:rp_endofpacket
	wire          vga_pixel_buffer_master_translator_avalon_universal_master_0_waitrequest;                   // VGA_pixel_buffer_master_agent:av_waitrequest -> VGA_pixel_buffer_master_translator:uav_waitrequest
	wire   [15:0] vga_pixel_buffer_master_translator_avalon_universal_master_0_readdata;                      // VGA_pixel_buffer_master_agent:av_readdata -> VGA_pixel_buffer_master_translator:uav_readdata
	wire          vga_pixel_buffer_master_translator_avalon_universal_master_0_debugaccess;                   // VGA_pixel_buffer_master_translator:uav_debugaccess -> VGA_pixel_buffer_master_agent:av_debugaccess
	wire   [31:0] vga_pixel_buffer_master_translator_avalon_universal_master_0_address;                       // VGA_pixel_buffer_master_translator:uav_address -> VGA_pixel_buffer_master_agent:av_address
	wire          vga_pixel_buffer_master_translator_avalon_universal_master_0_read;                          // VGA_pixel_buffer_master_translator:uav_read -> VGA_pixel_buffer_master_agent:av_read
	wire    [1:0] vga_pixel_buffer_master_translator_avalon_universal_master_0_byteenable;                    // VGA_pixel_buffer_master_translator:uav_byteenable -> VGA_pixel_buffer_master_agent:av_byteenable
	wire          vga_pixel_buffer_master_translator_avalon_universal_master_0_readdatavalid;                 // VGA_pixel_buffer_master_agent:av_readdatavalid -> VGA_pixel_buffer_master_translator:uav_readdatavalid
	wire          vga_pixel_buffer_master_translator_avalon_universal_master_0_lock;                          // VGA_pixel_buffer_master_translator:uav_lock -> VGA_pixel_buffer_master_agent:av_lock
	wire          vga_pixel_buffer_master_translator_avalon_universal_master_0_write;                         // VGA_pixel_buffer_master_translator:uav_write -> VGA_pixel_buffer_master_agent:av_write
	wire   [15:0] vga_pixel_buffer_master_translator_avalon_universal_master_0_writedata;                     // VGA_pixel_buffer_master_translator:uav_writedata -> VGA_pixel_buffer_master_agent:av_writedata
	wire    [1:0] vga_pixel_buffer_master_translator_avalon_universal_master_0_burstcount;                    // VGA_pixel_buffer_master_translator:uav_burstcount -> VGA_pixel_buffer_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                      // rsp_mux_001:src_valid -> VGA_pixel_buffer_master_agent:rp_valid
	wire   [89:0] rsp_mux_001_src_data;                                                                       // rsp_mux_001:src_data -> VGA_pixel_buffer_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                      // VGA_pixel_buffer_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [15:0] rsp_mux_001_src_channel;                                                                    // rsp_mux_001:src_channel -> VGA_pixel_buffer_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                              // rsp_mux_001:src_startofpacket -> VGA_pixel_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                // rsp_mux_001:src_endofpacket -> VGA_pixel_buffer_master_agent:rp_endofpacket
	wire          ev19_core_0_instruction_master_translator_avalon_universal_master_0_waitrequest;            // EV19_Core_0_Instruction_Master_agent:av_waitrequest -> EV19_Core_0_Instruction_Master_translator:uav_waitrequest
	wire   [31:0] ev19_core_0_instruction_master_translator_avalon_universal_master_0_readdata;               // EV19_Core_0_Instruction_Master_agent:av_readdata -> EV19_Core_0_Instruction_Master_translator:uav_readdata
	wire          ev19_core_0_instruction_master_translator_avalon_universal_master_0_debugaccess;            // EV19_Core_0_Instruction_Master_translator:uav_debugaccess -> EV19_Core_0_Instruction_Master_agent:av_debugaccess
	wire   [31:0] ev19_core_0_instruction_master_translator_avalon_universal_master_0_address;                // EV19_Core_0_Instruction_Master_translator:uav_address -> EV19_Core_0_Instruction_Master_agent:av_address
	wire          ev19_core_0_instruction_master_translator_avalon_universal_master_0_read;                   // EV19_Core_0_Instruction_Master_translator:uav_read -> EV19_Core_0_Instruction_Master_agent:av_read
	wire    [3:0] ev19_core_0_instruction_master_translator_avalon_universal_master_0_byteenable;             // EV19_Core_0_Instruction_Master_translator:uav_byteenable -> EV19_Core_0_Instruction_Master_agent:av_byteenable
	wire          ev19_core_0_instruction_master_translator_avalon_universal_master_0_readdatavalid;          // EV19_Core_0_Instruction_Master_agent:av_readdatavalid -> EV19_Core_0_Instruction_Master_translator:uav_readdatavalid
	wire          ev19_core_0_instruction_master_translator_avalon_universal_master_0_lock;                   // EV19_Core_0_Instruction_Master_translator:uav_lock -> EV19_Core_0_Instruction_Master_agent:av_lock
	wire          ev19_core_0_instruction_master_translator_avalon_universal_master_0_write;                  // EV19_Core_0_Instruction_Master_translator:uav_write -> EV19_Core_0_Instruction_Master_agent:av_write
	wire   [31:0] ev19_core_0_instruction_master_translator_avalon_universal_master_0_writedata;              // EV19_Core_0_Instruction_Master_translator:uav_writedata -> EV19_Core_0_Instruction_Master_agent:av_writedata
	wire    [2:0] ev19_core_0_instruction_master_translator_avalon_universal_master_0_burstcount;             // EV19_Core_0_Instruction_Master_translator:uav_burstcount -> EV19_Core_0_Instruction_Master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                      // rsp_mux_002:src_valid -> EV19_Core_0_Instruction_Master_agent:rp_valid
	wire  [107:0] rsp_mux_002_src_data;                                                                       // rsp_mux_002:src_data -> EV19_Core_0_Instruction_Master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                      // EV19_Core_0_Instruction_Master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [15:0] rsp_mux_002_src_channel;                                                                    // rsp_mux_002:src_channel -> EV19_Core_0_Instruction_Master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                              // rsp_mux_002:src_startofpacket -> EV19_Core_0_Instruction_Master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                // rsp_mux_002:src_endofpacket -> EV19_Core_0_Instruction_Master_agent:rp_endofpacket
	wire   [31:0] adc_adc_slave_agent_m0_readdata;                                                            // ADC_adc_slave_translator:uav_readdata -> ADC_adc_slave_agent:m0_readdata
	wire          adc_adc_slave_agent_m0_waitrequest;                                                         // ADC_adc_slave_translator:uav_waitrequest -> ADC_adc_slave_agent:m0_waitrequest
	wire          adc_adc_slave_agent_m0_debugaccess;                                                         // ADC_adc_slave_agent:m0_debugaccess -> ADC_adc_slave_translator:uav_debugaccess
	wire   [31:0] adc_adc_slave_agent_m0_address;                                                             // ADC_adc_slave_agent:m0_address -> ADC_adc_slave_translator:uav_address
	wire    [3:0] adc_adc_slave_agent_m0_byteenable;                                                          // ADC_adc_slave_agent:m0_byteenable -> ADC_adc_slave_translator:uav_byteenable
	wire          adc_adc_slave_agent_m0_read;                                                                // ADC_adc_slave_agent:m0_read -> ADC_adc_slave_translator:uav_read
	wire          adc_adc_slave_agent_m0_readdatavalid;                                                       // ADC_adc_slave_translator:uav_readdatavalid -> ADC_adc_slave_agent:m0_readdatavalid
	wire          adc_adc_slave_agent_m0_lock;                                                                // ADC_adc_slave_agent:m0_lock -> ADC_adc_slave_translator:uav_lock
	wire   [31:0] adc_adc_slave_agent_m0_writedata;                                                           // ADC_adc_slave_agent:m0_writedata -> ADC_adc_slave_translator:uav_writedata
	wire          adc_adc_slave_agent_m0_write;                                                               // ADC_adc_slave_agent:m0_write -> ADC_adc_slave_translator:uav_write
	wire    [2:0] adc_adc_slave_agent_m0_burstcount;                                                          // ADC_adc_slave_agent:m0_burstcount -> ADC_adc_slave_translator:uav_burstcount
	wire          adc_adc_slave_agent_rf_source_valid;                                                        // ADC_adc_slave_agent:rf_source_valid -> ADC_adc_slave_agent_rsp_fifo:in_valid
	wire  [108:0] adc_adc_slave_agent_rf_source_data;                                                         // ADC_adc_slave_agent:rf_source_data -> ADC_adc_slave_agent_rsp_fifo:in_data
	wire          adc_adc_slave_agent_rf_source_ready;                                                        // ADC_adc_slave_agent_rsp_fifo:in_ready -> ADC_adc_slave_agent:rf_source_ready
	wire          adc_adc_slave_agent_rf_source_startofpacket;                                                // ADC_adc_slave_agent:rf_source_startofpacket -> ADC_adc_slave_agent_rsp_fifo:in_startofpacket
	wire          adc_adc_slave_agent_rf_source_endofpacket;                                                  // ADC_adc_slave_agent:rf_source_endofpacket -> ADC_adc_slave_agent_rsp_fifo:in_endofpacket
	wire          adc_adc_slave_agent_rsp_fifo_out_valid;                                                     // ADC_adc_slave_agent_rsp_fifo:out_valid -> ADC_adc_slave_agent:rf_sink_valid
	wire  [108:0] adc_adc_slave_agent_rsp_fifo_out_data;                                                      // ADC_adc_slave_agent_rsp_fifo:out_data -> ADC_adc_slave_agent:rf_sink_data
	wire          adc_adc_slave_agent_rsp_fifo_out_ready;                                                     // ADC_adc_slave_agent:rf_sink_ready -> ADC_adc_slave_agent_rsp_fifo:out_ready
	wire          adc_adc_slave_agent_rsp_fifo_out_startofpacket;                                             // ADC_adc_slave_agent_rsp_fifo:out_startofpacket -> ADC_adc_slave_agent:rf_sink_startofpacket
	wire          adc_adc_slave_agent_rsp_fifo_out_endofpacket;                                               // ADC_adc_slave_agent_rsp_fifo:out_endofpacket -> ADC_adc_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                          // cmd_mux:src_valid -> ADC_adc_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                                           // cmd_mux:src_data -> ADC_adc_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                          // ADC_adc_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [15:0] cmd_mux_src_channel;                                                                        // cmd_mux:src_channel -> ADC_adc_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                  // cmd_mux:src_startofpacket -> ADC_adc_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                    // cmd_mux:src_endofpacket -> ADC_adc_slave_agent:cp_endofpacket
	wire   [31:0] keyboard_avalon_ps2_slave_agent_m0_readdata;                                                // Keyboard_avalon_ps2_slave_translator:uav_readdata -> Keyboard_avalon_ps2_slave_agent:m0_readdata
	wire          keyboard_avalon_ps2_slave_agent_m0_waitrequest;                                             // Keyboard_avalon_ps2_slave_translator:uav_waitrequest -> Keyboard_avalon_ps2_slave_agent:m0_waitrequest
	wire          keyboard_avalon_ps2_slave_agent_m0_debugaccess;                                             // Keyboard_avalon_ps2_slave_agent:m0_debugaccess -> Keyboard_avalon_ps2_slave_translator:uav_debugaccess
	wire   [31:0] keyboard_avalon_ps2_slave_agent_m0_address;                                                 // Keyboard_avalon_ps2_slave_agent:m0_address -> Keyboard_avalon_ps2_slave_translator:uav_address
	wire    [3:0] keyboard_avalon_ps2_slave_agent_m0_byteenable;                                              // Keyboard_avalon_ps2_slave_agent:m0_byteenable -> Keyboard_avalon_ps2_slave_translator:uav_byteenable
	wire          keyboard_avalon_ps2_slave_agent_m0_read;                                                    // Keyboard_avalon_ps2_slave_agent:m0_read -> Keyboard_avalon_ps2_slave_translator:uav_read
	wire          keyboard_avalon_ps2_slave_agent_m0_readdatavalid;                                           // Keyboard_avalon_ps2_slave_translator:uav_readdatavalid -> Keyboard_avalon_ps2_slave_agent:m0_readdatavalid
	wire          keyboard_avalon_ps2_slave_agent_m0_lock;                                                    // Keyboard_avalon_ps2_slave_agent:m0_lock -> Keyboard_avalon_ps2_slave_translator:uav_lock
	wire   [31:0] keyboard_avalon_ps2_slave_agent_m0_writedata;                                               // Keyboard_avalon_ps2_slave_agent:m0_writedata -> Keyboard_avalon_ps2_slave_translator:uav_writedata
	wire          keyboard_avalon_ps2_slave_agent_m0_write;                                                   // Keyboard_avalon_ps2_slave_agent:m0_write -> Keyboard_avalon_ps2_slave_translator:uav_write
	wire    [2:0] keyboard_avalon_ps2_slave_agent_m0_burstcount;                                              // Keyboard_avalon_ps2_slave_agent:m0_burstcount -> Keyboard_avalon_ps2_slave_translator:uav_burstcount
	wire          keyboard_avalon_ps2_slave_agent_rf_source_valid;                                            // Keyboard_avalon_ps2_slave_agent:rf_source_valid -> Keyboard_avalon_ps2_slave_agent_rsp_fifo:in_valid
	wire  [108:0] keyboard_avalon_ps2_slave_agent_rf_source_data;                                             // Keyboard_avalon_ps2_slave_agent:rf_source_data -> Keyboard_avalon_ps2_slave_agent_rsp_fifo:in_data
	wire          keyboard_avalon_ps2_slave_agent_rf_source_ready;                                            // Keyboard_avalon_ps2_slave_agent_rsp_fifo:in_ready -> Keyboard_avalon_ps2_slave_agent:rf_source_ready
	wire          keyboard_avalon_ps2_slave_agent_rf_source_startofpacket;                                    // Keyboard_avalon_ps2_slave_agent:rf_source_startofpacket -> Keyboard_avalon_ps2_slave_agent_rsp_fifo:in_startofpacket
	wire          keyboard_avalon_ps2_slave_agent_rf_source_endofpacket;                                      // Keyboard_avalon_ps2_slave_agent:rf_source_endofpacket -> Keyboard_avalon_ps2_slave_agent_rsp_fifo:in_endofpacket
	wire          keyboard_avalon_ps2_slave_agent_rsp_fifo_out_valid;                                         // Keyboard_avalon_ps2_slave_agent_rsp_fifo:out_valid -> Keyboard_avalon_ps2_slave_agent:rf_sink_valid
	wire  [108:0] keyboard_avalon_ps2_slave_agent_rsp_fifo_out_data;                                          // Keyboard_avalon_ps2_slave_agent_rsp_fifo:out_data -> Keyboard_avalon_ps2_slave_agent:rf_sink_data
	wire          keyboard_avalon_ps2_slave_agent_rsp_fifo_out_ready;                                         // Keyboard_avalon_ps2_slave_agent:rf_sink_ready -> Keyboard_avalon_ps2_slave_agent_rsp_fifo:out_ready
	wire          keyboard_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket;                                 // Keyboard_avalon_ps2_slave_agent_rsp_fifo:out_startofpacket -> Keyboard_avalon_ps2_slave_agent:rf_sink_startofpacket
	wire          keyboard_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket;                                   // Keyboard_avalon_ps2_slave_agent_rsp_fifo:out_endofpacket -> Keyboard_avalon_ps2_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                      // cmd_mux_001:src_valid -> Keyboard_avalon_ps2_slave_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                                       // cmd_mux_001:src_data -> Keyboard_avalon_ps2_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                      // Keyboard_avalon_ps2_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [15:0] cmd_mux_001_src_channel;                                                                    // cmd_mux_001:src_channel -> Keyboard_avalon_ps2_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                              // cmd_mux_001:src_startofpacket -> Keyboard_avalon_ps2_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                // cmd_mux_001:src_endofpacket -> Keyboard_avalon_ps2_slave_agent:cp_endofpacket
	wire   [31:0] vga_char_buffer_control_slave_agent_m0_readdata;                                            // VGA_char_buffer_control_slave_translator:uav_readdata -> VGA_char_buffer_control_slave_agent:m0_readdata
	wire          vga_char_buffer_control_slave_agent_m0_waitrequest;                                         // VGA_char_buffer_control_slave_translator:uav_waitrequest -> VGA_char_buffer_control_slave_agent:m0_waitrequest
	wire          vga_char_buffer_control_slave_agent_m0_debugaccess;                                         // VGA_char_buffer_control_slave_agent:m0_debugaccess -> VGA_char_buffer_control_slave_translator:uav_debugaccess
	wire   [31:0] vga_char_buffer_control_slave_agent_m0_address;                                             // VGA_char_buffer_control_slave_agent:m0_address -> VGA_char_buffer_control_slave_translator:uav_address
	wire    [3:0] vga_char_buffer_control_slave_agent_m0_byteenable;                                          // VGA_char_buffer_control_slave_agent:m0_byteenable -> VGA_char_buffer_control_slave_translator:uav_byteenable
	wire          vga_char_buffer_control_slave_agent_m0_read;                                                // VGA_char_buffer_control_slave_agent:m0_read -> VGA_char_buffer_control_slave_translator:uav_read
	wire          vga_char_buffer_control_slave_agent_m0_readdatavalid;                                       // VGA_char_buffer_control_slave_translator:uav_readdatavalid -> VGA_char_buffer_control_slave_agent:m0_readdatavalid
	wire          vga_char_buffer_control_slave_agent_m0_lock;                                                // VGA_char_buffer_control_slave_agent:m0_lock -> VGA_char_buffer_control_slave_translator:uav_lock
	wire   [31:0] vga_char_buffer_control_slave_agent_m0_writedata;                                           // VGA_char_buffer_control_slave_agent:m0_writedata -> VGA_char_buffer_control_slave_translator:uav_writedata
	wire          vga_char_buffer_control_slave_agent_m0_write;                                               // VGA_char_buffer_control_slave_agent:m0_write -> VGA_char_buffer_control_slave_translator:uav_write
	wire    [2:0] vga_char_buffer_control_slave_agent_m0_burstcount;                                          // VGA_char_buffer_control_slave_agent:m0_burstcount -> VGA_char_buffer_control_slave_translator:uav_burstcount
	wire          vga_char_buffer_control_slave_agent_rf_source_valid;                                        // VGA_char_buffer_control_slave_agent:rf_source_valid -> VGA_char_buffer_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] vga_char_buffer_control_slave_agent_rf_source_data;                                         // VGA_char_buffer_control_slave_agent:rf_source_data -> VGA_char_buffer_control_slave_agent_rsp_fifo:in_data
	wire          vga_char_buffer_control_slave_agent_rf_source_ready;                                        // VGA_char_buffer_control_slave_agent_rsp_fifo:in_ready -> VGA_char_buffer_control_slave_agent:rf_source_ready
	wire          vga_char_buffer_control_slave_agent_rf_source_startofpacket;                                // VGA_char_buffer_control_slave_agent:rf_source_startofpacket -> VGA_char_buffer_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_char_buffer_control_slave_agent_rf_source_endofpacket;                                  // VGA_char_buffer_control_slave_agent:rf_source_endofpacket -> VGA_char_buffer_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_char_buffer_control_slave_agent_rsp_fifo_out_valid;                                     // VGA_char_buffer_control_slave_agent_rsp_fifo:out_valid -> VGA_char_buffer_control_slave_agent:rf_sink_valid
	wire  [108:0] vga_char_buffer_control_slave_agent_rsp_fifo_out_data;                                      // VGA_char_buffer_control_slave_agent_rsp_fifo:out_data -> VGA_char_buffer_control_slave_agent:rf_sink_data
	wire          vga_char_buffer_control_slave_agent_rsp_fifo_out_ready;                                     // VGA_char_buffer_control_slave_agent:rf_sink_ready -> VGA_char_buffer_control_slave_agent_rsp_fifo:out_ready
	wire          vga_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket;                             // VGA_char_buffer_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_char_buffer_control_slave_agent:rf_sink_startofpacket
	wire          vga_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket;                               // VGA_char_buffer_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_char_buffer_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                      // cmd_mux_002:src_valid -> VGA_char_buffer_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                                       // cmd_mux_002:src_data -> VGA_char_buffer_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                      // VGA_char_buffer_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [15:0] cmd_mux_002_src_channel;                                                                    // cmd_mux_002:src_channel -> VGA_char_buffer_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                              // cmd_mux_002:src_startofpacket -> VGA_char_buffer_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                // cmd_mux_002:src_endofpacket -> VGA_char_buffer_control_slave_agent:cp_endofpacket
	wire    [7:0] vga_char_buffersource_slave_agent_m0_readdata;                                              // VGA_char_buffersource_slave_translator:uav_readdata -> VGA_char_buffersource_slave_agent:m0_readdata
	wire          vga_char_buffersource_slave_agent_m0_waitrequest;                                           // VGA_char_buffersource_slave_translator:uav_waitrequest -> VGA_char_buffersource_slave_agent:m0_waitrequest
	wire          vga_char_buffersource_slave_agent_m0_debugaccess;                                           // VGA_char_buffersource_slave_agent:m0_debugaccess -> VGA_char_buffersource_slave_translator:uav_debugaccess
	wire   [31:0] vga_char_buffersource_slave_agent_m0_address;                                               // VGA_char_buffersource_slave_agent:m0_address -> VGA_char_buffersource_slave_translator:uav_address
	wire    [0:0] vga_char_buffersource_slave_agent_m0_byteenable;                                            // VGA_char_buffersource_slave_agent:m0_byteenable -> VGA_char_buffersource_slave_translator:uav_byteenable
	wire          vga_char_buffersource_slave_agent_m0_read;                                                  // VGA_char_buffersource_slave_agent:m0_read -> VGA_char_buffersource_slave_translator:uav_read
	wire          vga_char_buffersource_slave_agent_m0_readdatavalid;                                         // VGA_char_buffersource_slave_translator:uav_readdatavalid -> VGA_char_buffersource_slave_agent:m0_readdatavalid
	wire          vga_char_buffersource_slave_agent_m0_lock;                                                  // VGA_char_buffersource_slave_agent:m0_lock -> VGA_char_buffersource_slave_translator:uav_lock
	wire    [7:0] vga_char_buffersource_slave_agent_m0_writedata;                                             // VGA_char_buffersource_slave_agent:m0_writedata -> VGA_char_buffersource_slave_translator:uav_writedata
	wire          vga_char_buffersource_slave_agent_m0_write;                                                 // VGA_char_buffersource_slave_agent:m0_write -> VGA_char_buffersource_slave_translator:uav_write
	wire    [0:0] vga_char_buffersource_slave_agent_m0_burstcount;                                            // VGA_char_buffersource_slave_agent:m0_burstcount -> VGA_char_buffersource_slave_translator:uav_burstcount
	wire          vga_char_buffersource_slave_agent_rf_source_valid;                                          // VGA_char_buffersource_slave_agent:rf_source_valid -> VGA_char_buffersource_slave_agent_rsp_fifo:in_valid
	wire   [81:0] vga_char_buffersource_slave_agent_rf_source_data;                                           // VGA_char_buffersource_slave_agent:rf_source_data -> VGA_char_buffersource_slave_agent_rsp_fifo:in_data
	wire          vga_char_buffersource_slave_agent_rf_source_ready;                                          // VGA_char_buffersource_slave_agent_rsp_fifo:in_ready -> VGA_char_buffersource_slave_agent:rf_source_ready
	wire          vga_char_buffersource_slave_agent_rf_source_startofpacket;                                  // VGA_char_buffersource_slave_agent:rf_source_startofpacket -> VGA_char_buffersource_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_char_buffersource_slave_agent_rf_source_endofpacket;                                    // VGA_char_buffersource_slave_agent:rf_source_endofpacket -> VGA_char_buffersource_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_char_buffersource_slave_agent_rsp_fifo_out_valid;                                       // VGA_char_buffersource_slave_agent_rsp_fifo:out_valid -> VGA_char_buffersource_slave_agent:rf_sink_valid
	wire   [81:0] vga_char_buffersource_slave_agent_rsp_fifo_out_data;                                        // VGA_char_buffersource_slave_agent_rsp_fifo:out_data -> VGA_char_buffersource_slave_agent:rf_sink_data
	wire          vga_char_buffersource_slave_agent_rsp_fifo_out_ready;                                       // VGA_char_buffersource_slave_agent:rf_sink_ready -> VGA_char_buffersource_slave_agent_rsp_fifo:out_ready
	wire          vga_char_buffersource_slave_agent_rsp_fifo_out_startofpacket;                               // VGA_char_buffersource_slave_agent_rsp_fifo:out_startofpacket -> VGA_char_buffersource_slave_agent:rf_sink_startofpacket
	wire          vga_char_buffersource_slave_agent_rsp_fifo_out_endofpacket;                                 // VGA_char_buffersource_slave_agent_rsp_fifo:out_endofpacket -> VGA_char_buffersource_slave_agent:rf_sink_endofpacket
	wire   [31:0] id_control_slave_agent_m0_readdata;                                                         // ID_control_slave_translator:uav_readdata -> ID_control_slave_agent:m0_readdata
	wire          id_control_slave_agent_m0_waitrequest;                                                      // ID_control_slave_translator:uav_waitrequest -> ID_control_slave_agent:m0_waitrequest
	wire          id_control_slave_agent_m0_debugaccess;                                                      // ID_control_slave_agent:m0_debugaccess -> ID_control_slave_translator:uav_debugaccess
	wire   [31:0] id_control_slave_agent_m0_address;                                                          // ID_control_slave_agent:m0_address -> ID_control_slave_translator:uav_address
	wire    [3:0] id_control_slave_agent_m0_byteenable;                                                       // ID_control_slave_agent:m0_byteenable -> ID_control_slave_translator:uav_byteenable
	wire          id_control_slave_agent_m0_read;                                                             // ID_control_slave_agent:m0_read -> ID_control_slave_translator:uav_read
	wire          id_control_slave_agent_m0_readdatavalid;                                                    // ID_control_slave_translator:uav_readdatavalid -> ID_control_slave_agent:m0_readdatavalid
	wire          id_control_slave_agent_m0_lock;                                                             // ID_control_slave_agent:m0_lock -> ID_control_slave_translator:uav_lock
	wire   [31:0] id_control_slave_agent_m0_writedata;                                                        // ID_control_slave_agent:m0_writedata -> ID_control_slave_translator:uav_writedata
	wire          id_control_slave_agent_m0_write;                                                            // ID_control_slave_agent:m0_write -> ID_control_slave_translator:uav_write
	wire    [2:0] id_control_slave_agent_m0_burstcount;                                                       // ID_control_slave_agent:m0_burstcount -> ID_control_slave_translator:uav_burstcount
	wire          id_control_slave_agent_rf_source_valid;                                                     // ID_control_slave_agent:rf_source_valid -> ID_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] id_control_slave_agent_rf_source_data;                                                      // ID_control_slave_agent:rf_source_data -> ID_control_slave_agent_rsp_fifo:in_data
	wire          id_control_slave_agent_rf_source_ready;                                                     // ID_control_slave_agent_rsp_fifo:in_ready -> ID_control_slave_agent:rf_source_ready
	wire          id_control_slave_agent_rf_source_startofpacket;                                             // ID_control_slave_agent:rf_source_startofpacket -> ID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          id_control_slave_agent_rf_source_endofpacket;                                               // ID_control_slave_agent:rf_source_endofpacket -> ID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          id_control_slave_agent_rsp_fifo_out_valid;                                                  // ID_control_slave_agent_rsp_fifo:out_valid -> ID_control_slave_agent:rf_sink_valid
	wire  [108:0] id_control_slave_agent_rsp_fifo_out_data;                                                   // ID_control_slave_agent_rsp_fifo:out_data -> ID_control_slave_agent:rf_sink_data
	wire          id_control_slave_agent_rsp_fifo_out_ready;                                                  // ID_control_slave_agent:rf_sink_ready -> ID_control_slave_agent_rsp_fifo:out_ready
	wire          id_control_slave_agent_rsp_fifo_out_startofpacket;                                          // ID_control_slave_agent_rsp_fifo:out_startofpacket -> ID_control_slave_agent:rf_sink_startofpacket
	wire          id_control_slave_agent_rsp_fifo_out_endofpacket;                                            // ID_control_slave_agent_rsp_fifo:out_endofpacket -> ID_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                      // cmd_mux_004:src_valid -> ID_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                                       // cmd_mux_004:src_data -> ID_control_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                      // ID_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [15:0] cmd_mux_004_src_channel;                                                                    // cmd_mux_004:src_channel -> ID_control_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                              // cmd_mux_004:src_startofpacket -> ID_control_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                // cmd_mux_004:src_endofpacket -> ID_control_slave_agent:cp_endofpacket
	wire   [31:0] performance_counter_control_slave_agent_m0_readdata;                                        // Performance_Counter_control_slave_translator:uav_readdata -> Performance_Counter_control_slave_agent:m0_readdata
	wire          performance_counter_control_slave_agent_m0_waitrequest;                                     // Performance_Counter_control_slave_translator:uav_waitrequest -> Performance_Counter_control_slave_agent:m0_waitrequest
	wire          performance_counter_control_slave_agent_m0_debugaccess;                                     // Performance_Counter_control_slave_agent:m0_debugaccess -> Performance_Counter_control_slave_translator:uav_debugaccess
	wire   [31:0] performance_counter_control_slave_agent_m0_address;                                         // Performance_Counter_control_slave_agent:m0_address -> Performance_Counter_control_slave_translator:uav_address
	wire    [3:0] performance_counter_control_slave_agent_m0_byteenable;                                      // Performance_Counter_control_slave_agent:m0_byteenable -> Performance_Counter_control_slave_translator:uav_byteenable
	wire          performance_counter_control_slave_agent_m0_read;                                            // Performance_Counter_control_slave_agent:m0_read -> Performance_Counter_control_slave_translator:uav_read
	wire          performance_counter_control_slave_agent_m0_readdatavalid;                                   // Performance_Counter_control_slave_translator:uav_readdatavalid -> Performance_Counter_control_slave_agent:m0_readdatavalid
	wire          performance_counter_control_slave_agent_m0_lock;                                            // Performance_Counter_control_slave_agent:m0_lock -> Performance_Counter_control_slave_translator:uav_lock
	wire   [31:0] performance_counter_control_slave_agent_m0_writedata;                                       // Performance_Counter_control_slave_agent:m0_writedata -> Performance_Counter_control_slave_translator:uav_writedata
	wire          performance_counter_control_slave_agent_m0_write;                                           // Performance_Counter_control_slave_agent:m0_write -> Performance_Counter_control_slave_translator:uav_write
	wire    [2:0] performance_counter_control_slave_agent_m0_burstcount;                                      // Performance_Counter_control_slave_agent:m0_burstcount -> Performance_Counter_control_slave_translator:uav_burstcount
	wire          performance_counter_control_slave_agent_rf_source_valid;                                    // Performance_Counter_control_slave_agent:rf_source_valid -> Performance_Counter_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] performance_counter_control_slave_agent_rf_source_data;                                     // Performance_Counter_control_slave_agent:rf_source_data -> Performance_Counter_control_slave_agent_rsp_fifo:in_data
	wire          performance_counter_control_slave_agent_rf_source_ready;                                    // Performance_Counter_control_slave_agent_rsp_fifo:in_ready -> Performance_Counter_control_slave_agent:rf_source_ready
	wire          performance_counter_control_slave_agent_rf_source_startofpacket;                            // Performance_Counter_control_slave_agent:rf_source_startofpacket -> Performance_Counter_control_slave_agent_rsp_fifo:in_startofpacket
	wire          performance_counter_control_slave_agent_rf_source_endofpacket;                              // Performance_Counter_control_slave_agent:rf_source_endofpacket -> Performance_Counter_control_slave_agent_rsp_fifo:in_endofpacket
	wire          performance_counter_control_slave_agent_rsp_fifo_out_valid;                                 // Performance_Counter_control_slave_agent_rsp_fifo:out_valid -> Performance_Counter_control_slave_agent:rf_sink_valid
	wire  [108:0] performance_counter_control_slave_agent_rsp_fifo_out_data;                                  // Performance_Counter_control_slave_agent_rsp_fifo:out_data -> Performance_Counter_control_slave_agent:rf_sink_data
	wire          performance_counter_control_slave_agent_rsp_fifo_out_ready;                                 // Performance_Counter_control_slave_agent:rf_sink_ready -> Performance_Counter_control_slave_agent_rsp_fifo:out_ready
	wire          performance_counter_control_slave_agent_rsp_fifo_out_startofpacket;                         // Performance_Counter_control_slave_agent_rsp_fifo:out_startofpacket -> Performance_Counter_control_slave_agent:rf_sink_startofpacket
	wire          performance_counter_control_slave_agent_rsp_fifo_out_endofpacket;                           // Performance_Counter_control_slave_agent_rsp_fifo:out_endofpacket -> Performance_Counter_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                      // cmd_mux_005:src_valid -> Performance_Counter_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                                       // cmd_mux_005:src_data -> Performance_Counter_control_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                      // Performance_Counter_control_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [15:0] cmd_mux_005_src_channel;                                                                    // cmd_mux_005:src_channel -> Performance_Counter_control_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                              // cmd_mux_005:src_startofpacket -> Performance_Counter_control_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                // cmd_mux_005:src_endofpacket -> Performance_Counter_control_slave_agent:cp_endofpacket
	wire   [31:0] vga_pixel_buffer_slave_agent_m0_readdata;                                                   // VGA_pixel_buffer_slave_translator:uav_readdata -> VGA_pixel_buffer_slave_agent:m0_readdata
	wire          vga_pixel_buffer_slave_agent_m0_waitrequest;                                                // VGA_pixel_buffer_slave_translator:uav_waitrequest -> VGA_pixel_buffer_slave_agent:m0_waitrequest
	wire          vga_pixel_buffer_slave_agent_m0_debugaccess;                                                // VGA_pixel_buffer_slave_agent:m0_debugaccess -> VGA_pixel_buffer_slave_translator:uav_debugaccess
	wire   [31:0] vga_pixel_buffer_slave_agent_m0_address;                                                    // VGA_pixel_buffer_slave_agent:m0_address -> VGA_pixel_buffer_slave_translator:uav_address
	wire    [3:0] vga_pixel_buffer_slave_agent_m0_byteenable;                                                 // VGA_pixel_buffer_slave_agent:m0_byteenable -> VGA_pixel_buffer_slave_translator:uav_byteenable
	wire          vga_pixel_buffer_slave_agent_m0_read;                                                       // VGA_pixel_buffer_slave_agent:m0_read -> VGA_pixel_buffer_slave_translator:uav_read
	wire          vga_pixel_buffer_slave_agent_m0_readdatavalid;                                              // VGA_pixel_buffer_slave_translator:uav_readdatavalid -> VGA_pixel_buffer_slave_agent:m0_readdatavalid
	wire          vga_pixel_buffer_slave_agent_m0_lock;                                                       // VGA_pixel_buffer_slave_agent:m0_lock -> VGA_pixel_buffer_slave_translator:uav_lock
	wire   [31:0] vga_pixel_buffer_slave_agent_m0_writedata;                                                  // VGA_pixel_buffer_slave_agent:m0_writedata -> VGA_pixel_buffer_slave_translator:uav_writedata
	wire          vga_pixel_buffer_slave_agent_m0_write;                                                      // VGA_pixel_buffer_slave_agent:m0_write -> VGA_pixel_buffer_slave_translator:uav_write
	wire    [2:0] vga_pixel_buffer_slave_agent_m0_burstcount;                                                 // VGA_pixel_buffer_slave_agent:m0_burstcount -> VGA_pixel_buffer_slave_translator:uav_burstcount
	wire          vga_pixel_buffer_slave_agent_rf_source_valid;                                               // VGA_pixel_buffer_slave_agent:rf_source_valid -> VGA_pixel_buffer_slave_agent_rsp_fifo:in_valid
	wire  [108:0] vga_pixel_buffer_slave_agent_rf_source_data;                                                // VGA_pixel_buffer_slave_agent:rf_source_data -> VGA_pixel_buffer_slave_agent_rsp_fifo:in_data
	wire          vga_pixel_buffer_slave_agent_rf_source_ready;                                               // VGA_pixel_buffer_slave_agent_rsp_fifo:in_ready -> VGA_pixel_buffer_slave_agent:rf_source_ready
	wire          vga_pixel_buffer_slave_agent_rf_source_startofpacket;                                       // VGA_pixel_buffer_slave_agent:rf_source_startofpacket -> VGA_pixel_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_pixel_buffer_slave_agent_rf_source_endofpacket;                                         // VGA_pixel_buffer_slave_agent:rf_source_endofpacket -> VGA_pixel_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_pixel_buffer_slave_agent_rsp_fifo_out_valid;                                            // VGA_pixel_buffer_slave_agent_rsp_fifo:out_valid -> VGA_pixel_buffer_slave_agent:rf_sink_valid
	wire  [108:0] vga_pixel_buffer_slave_agent_rsp_fifo_out_data;                                             // VGA_pixel_buffer_slave_agent_rsp_fifo:out_data -> VGA_pixel_buffer_slave_agent:rf_sink_data
	wire          vga_pixel_buffer_slave_agent_rsp_fifo_out_ready;                                            // VGA_pixel_buffer_slave_agent:rf_sink_ready -> VGA_pixel_buffer_slave_agent_rsp_fifo:out_ready
	wire          vga_pixel_buffer_slave_agent_rsp_fifo_out_startofpacket;                                    // VGA_pixel_buffer_slave_agent_rsp_fifo:out_startofpacket -> VGA_pixel_buffer_slave_agent:rf_sink_startofpacket
	wire          vga_pixel_buffer_slave_agent_rsp_fifo_out_endofpacket;                                      // VGA_pixel_buffer_slave_agent_rsp_fifo:out_endofpacket -> VGA_pixel_buffer_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                      // cmd_mux_006:src_valid -> VGA_pixel_buffer_slave_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                                       // cmd_mux_006:src_data -> VGA_pixel_buffer_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                      // VGA_pixel_buffer_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [15:0] cmd_mux_006_src_channel;                                                                    // cmd_mux_006:src_channel -> VGA_pixel_buffer_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                              // cmd_mux_006:src_startofpacket -> VGA_pixel_buffer_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                // cmd_mux_006:src_endofpacket -> VGA_pixel_buffer_slave_agent:cp_endofpacket
	wire   [31:0] pll_pll_slave_agent_m0_readdata;                                                            // PLL_pll_slave_translator:uav_readdata -> PLL_pll_slave_agent:m0_readdata
	wire          pll_pll_slave_agent_m0_waitrequest;                                                         // PLL_pll_slave_translator:uav_waitrequest -> PLL_pll_slave_agent:m0_waitrequest
	wire          pll_pll_slave_agent_m0_debugaccess;                                                         // PLL_pll_slave_agent:m0_debugaccess -> PLL_pll_slave_translator:uav_debugaccess
	wire   [31:0] pll_pll_slave_agent_m0_address;                                                             // PLL_pll_slave_agent:m0_address -> PLL_pll_slave_translator:uav_address
	wire    [3:0] pll_pll_slave_agent_m0_byteenable;                                                          // PLL_pll_slave_agent:m0_byteenable -> PLL_pll_slave_translator:uav_byteenable
	wire          pll_pll_slave_agent_m0_read;                                                                // PLL_pll_slave_agent:m0_read -> PLL_pll_slave_translator:uav_read
	wire          pll_pll_slave_agent_m0_readdatavalid;                                                       // PLL_pll_slave_translator:uav_readdatavalid -> PLL_pll_slave_agent:m0_readdatavalid
	wire          pll_pll_slave_agent_m0_lock;                                                                // PLL_pll_slave_agent:m0_lock -> PLL_pll_slave_translator:uav_lock
	wire   [31:0] pll_pll_slave_agent_m0_writedata;                                                           // PLL_pll_slave_agent:m0_writedata -> PLL_pll_slave_translator:uav_writedata
	wire          pll_pll_slave_agent_m0_write;                                                               // PLL_pll_slave_agent:m0_write -> PLL_pll_slave_translator:uav_write
	wire    [2:0] pll_pll_slave_agent_m0_burstcount;                                                          // PLL_pll_slave_agent:m0_burstcount -> PLL_pll_slave_translator:uav_burstcount
	wire          pll_pll_slave_agent_rf_source_valid;                                                        // PLL_pll_slave_agent:rf_source_valid -> PLL_pll_slave_agent_rsp_fifo:in_valid
	wire  [108:0] pll_pll_slave_agent_rf_source_data;                                                         // PLL_pll_slave_agent:rf_source_data -> PLL_pll_slave_agent_rsp_fifo:in_data
	wire          pll_pll_slave_agent_rf_source_ready;                                                        // PLL_pll_slave_agent_rsp_fifo:in_ready -> PLL_pll_slave_agent:rf_source_ready
	wire          pll_pll_slave_agent_rf_source_startofpacket;                                                // PLL_pll_slave_agent:rf_source_startofpacket -> PLL_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          pll_pll_slave_agent_rf_source_endofpacket;                                                  // PLL_pll_slave_agent:rf_source_endofpacket -> PLL_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          pll_pll_slave_agent_rsp_fifo_out_valid;                                                     // PLL_pll_slave_agent_rsp_fifo:out_valid -> PLL_pll_slave_agent:rf_sink_valid
	wire  [108:0] pll_pll_slave_agent_rsp_fifo_out_data;                                                      // PLL_pll_slave_agent_rsp_fifo:out_data -> PLL_pll_slave_agent:rf_sink_data
	wire          pll_pll_slave_agent_rsp_fifo_out_ready;                                                     // PLL_pll_slave_agent:rf_sink_ready -> PLL_pll_slave_agent_rsp_fifo:out_ready
	wire          pll_pll_slave_agent_rsp_fifo_out_startofpacket;                                             // PLL_pll_slave_agent_rsp_fifo:out_startofpacket -> PLL_pll_slave_agent:rf_sink_startofpacket
	wire          pll_pll_slave_agent_rsp_fifo_out_endofpacket;                                               // PLL_pll_slave_agent_rsp_fifo:out_endofpacket -> PLL_pll_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                      // cmd_mux_007:src_valid -> PLL_pll_slave_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                                       // cmd_mux_007:src_data -> PLL_pll_slave_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                      // PLL_pll_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [15:0] cmd_mux_007_src_channel;                                                                    // cmd_mux_007:src_channel -> PLL_pll_slave_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                              // cmd_mux_007:src_startofpacket -> PLL_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                // cmd_mux_007:src_endofpacket -> PLL_pll_slave_agent:cp_endofpacket
	wire   [31:0] vga_rgb_resampler_slave_agent_m0_readdata;                                                  // VGA_rgb_resampler_slave_translator:uav_readdata -> VGA_rgb_resampler_slave_agent:m0_readdata
	wire          vga_rgb_resampler_slave_agent_m0_waitrequest;                                               // VGA_rgb_resampler_slave_translator:uav_waitrequest -> VGA_rgb_resampler_slave_agent:m0_waitrequest
	wire          vga_rgb_resampler_slave_agent_m0_debugaccess;                                               // VGA_rgb_resampler_slave_agent:m0_debugaccess -> VGA_rgb_resampler_slave_translator:uav_debugaccess
	wire   [31:0] vga_rgb_resampler_slave_agent_m0_address;                                                   // VGA_rgb_resampler_slave_agent:m0_address -> VGA_rgb_resampler_slave_translator:uav_address
	wire    [3:0] vga_rgb_resampler_slave_agent_m0_byteenable;                                                // VGA_rgb_resampler_slave_agent:m0_byteenable -> VGA_rgb_resampler_slave_translator:uav_byteenable
	wire          vga_rgb_resampler_slave_agent_m0_read;                                                      // VGA_rgb_resampler_slave_agent:m0_read -> VGA_rgb_resampler_slave_translator:uav_read
	wire          vga_rgb_resampler_slave_agent_m0_readdatavalid;                                             // VGA_rgb_resampler_slave_translator:uav_readdatavalid -> VGA_rgb_resampler_slave_agent:m0_readdatavalid
	wire          vga_rgb_resampler_slave_agent_m0_lock;                                                      // VGA_rgb_resampler_slave_agent:m0_lock -> VGA_rgb_resampler_slave_translator:uav_lock
	wire   [31:0] vga_rgb_resampler_slave_agent_m0_writedata;                                                 // VGA_rgb_resampler_slave_agent:m0_writedata -> VGA_rgb_resampler_slave_translator:uav_writedata
	wire          vga_rgb_resampler_slave_agent_m0_write;                                                     // VGA_rgb_resampler_slave_agent:m0_write -> VGA_rgb_resampler_slave_translator:uav_write
	wire    [2:0] vga_rgb_resampler_slave_agent_m0_burstcount;                                                // VGA_rgb_resampler_slave_agent:m0_burstcount -> VGA_rgb_resampler_slave_translator:uav_burstcount
	wire          vga_rgb_resampler_slave_agent_rf_source_valid;                                              // VGA_rgb_resampler_slave_agent:rf_source_valid -> VGA_rgb_resampler_slave_agent_rsp_fifo:in_valid
	wire  [108:0] vga_rgb_resampler_slave_agent_rf_source_data;                                               // VGA_rgb_resampler_slave_agent:rf_source_data -> VGA_rgb_resampler_slave_agent_rsp_fifo:in_data
	wire          vga_rgb_resampler_slave_agent_rf_source_ready;                                              // VGA_rgb_resampler_slave_agent_rsp_fifo:in_ready -> VGA_rgb_resampler_slave_agent:rf_source_ready
	wire          vga_rgb_resampler_slave_agent_rf_source_startofpacket;                                      // VGA_rgb_resampler_slave_agent:rf_source_startofpacket -> VGA_rgb_resampler_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_rgb_resampler_slave_agent_rf_source_endofpacket;                                        // VGA_rgb_resampler_slave_agent:rf_source_endofpacket -> VGA_rgb_resampler_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_rgb_resampler_slave_agent_rsp_fifo_out_valid;                                           // VGA_rgb_resampler_slave_agent_rsp_fifo:out_valid -> VGA_rgb_resampler_slave_agent:rf_sink_valid
	wire  [108:0] vga_rgb_resampler_slave_agent_rsp_fifo_out_data;                                            // VGA_rgb_resampler_slave_agent_rsp_fifo:out_data -> VGA_rgb_resampler_slave_agent:rf_sink_data
	wire          vga_rgb_resampler_slave_agent_rsp_fifo_out_ready;                                           // VGA_rgb_resampler_slave_agent:rf_sink_ready -> VGA_rgb_resampler_slave_agent_rsp_fifo:out_ready
	wire          vga_rgb_resampler_slave_agent_rsp_fifo_out_startofpacket;                                   // VGA_rgb_resampler_slave_agent_rsp_fifo:out_startofpacket -> VGA_rgb_resampler_slave_agent:rf_sink_startofpacket
	wire          vga_rgb_resampler_slave_agent_rsp_fifo_out_endofpacket;                                     // VGA_rgb_resampler_slave_agent_rsp_fifo:out_endofpacket -> VGA_rgb_resampler_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                      // cmd_mux_008:src_valid -> VGA_rgb_resampler_slave_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                                       // cmd_mux_008:src_data -> VGA_rgb_resampler_slave_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                      // VGA_rgb_resampler_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [15:0] cmd_mux_008_src_channel;                                                                    // cmd_mux_008:src_channel -> VGA_rgb_resampler_slave_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                              // cmd_mux_008:src_startofpacket -> VGA_rgb_resampler_slave_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                // cmd_mux_008:src_endofpacket -> VGA_rgb_resampler_slave_agent:cp_endofpacket
	wire   [31:0] leds_s1_agent_m0_readdata;                                                                  // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                               // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                               // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [31:0] leds_s1_agent_m0_address;                                                                   // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                                // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                                      // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                             // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                                      // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                                 // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                                     // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                                // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                              // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [108:0] leds_s1_agent_rf_source_data;                                                               // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                              // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                                      // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                        // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                           // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [108:0] leds_s1_agent_rsp_fifo_out_data;                                                            // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                           // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                                   // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                                     // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                      // cmd_mux_009:src_valid -> LEDs_s1_agent:cp_valid
	wire  [107:0] cmd_mux_009_src_data;                                                                       // cmd_mux_009:src_data -> LEDs_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                      // LEDs_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [15:0] cmd_mux_009_src_channel;                                                                    // cmd_mux_009:src_channel -> LEDs_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                              // cmd_mux_009:src_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                // cmd_mux_009:src_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire   [31:0] dip_switch_s1_agent_m0_readdata;                                                            // Dip_Switch_s1_translator:uav_readdata -> Dip_Switch_s1_agent:m0_readdata
	wire          dip_switch_s1_agent_m0_waitrequest;                                                         // Dip_Switch_s1_translator:uav_waitrequest -> Dip_Switch_s1_agent:m0_waitrequest
	wire          dip_switch_s1_agent_m0_debugaccess;                                                         // Dip_Switch_s1_agent:m0_debugaccess -> Dip_Switch_s1_translator:uav_debugaccess
	wire   [31:0] dip_switch_s1_agent_m0_address;                                                             // Dip_Switch_s1_agent:m0_address -> Dip_Switch_s1_translator:uav_address
	wire    [3:0] dip_switch_s1_agent_m0_byteenable;                                                          // Dip_Switch_s1_agent:m0_byteenable -> Dip_Switch_s1_translator:uav_byteenable
	wire          dip_switch_s1_agent_m0_read;                                                                // Dip_Switch_s1_agent:m0_read -> Dip_Switch_s1_translator:uav_read
	wire          dip_switch_s1_agent_m0_readdatavalid;                                                       // Dip_Switch_s1_translator:uav_readdatavalid -> Dip_Switch_s1_agent:m0_readdatavalid
	wire          dip_switch_s1_agent_m0_lock;                                                                // Dip_Switch_s1_agent:m0_lock -> Dip_Switch_s1_translator:uav_lock
	wire   [31:0] dip_switch_s1_agent_m0_writedata;                                                           // Dip_Switch_s1_agent:m0_writedata -> Dip_Switch_s1_translator:uav_writedata
	wire          dip_switch_s1_agent_m0_write;                                                               // Dip_Switch_s1_agent:m0_write -> Dip_Switch_s1_translator:uav_write
	wire    [2:0] dip_switch_s1_agent_m0_burstcount;                                                          // Dip_Switch_s1_agent:m0_burstcount -> Dip_Switch_s1_translator:uav_burstcount
	wire          dip_switch_s1_agent_rf_source_valid;                                                        // Dip_Switch_s1_agent:rf_source_valid -> Dip_Switch_s1_agent_rsp_fifo:in_valid
	wire  [108:0] dip_switch_s1_agent_rf_source_data;                                                         // Dip_Switch_s1_agent:rf_source_data -> Dip_Switch_s1_agent_rsp_fifo:in_data
	wire          dip_switch_s1_agent_rf_source_ready;                                                        // Dip_Switch_s1_agent_rsp_fifo:in_ready -> Dip_Switch_s1_agent:rf_source_ready
	wire          dip_switch_s1_agent_rf_source_startofpacket;                                                // Dip_Switch_s1_agent:rf_source_startofpacket -> Dip_Switch_s1_agent_rsp_fifo:in_startofpacket
	wire          dip_switch_s1_agent_rf_source_endofpacket;                                                  // Dip_Switch_s1_agent:rf_source_endofpacket -> Dip_Switch_s1_agent_rsp_fifo:in_endofpacket
	wire          dip_switch_s1_agent_rsp_fifo_out_valid;                                                     // Dip_Switch_s1_agent_rsp_fifo:out_valid -> Dip_Switch_s1_agent:rf_sink_valid
	wire  [108:0] dip_switch_s1_agent_rsp_fifo_out_data;                                                      // Dip_Switch_s1_agent_rsp_fifo:out_data -> Dip_Switch_s1_agent:rf_sink_data
	wire          dip_switch_s1_agent_rsp_fifo_out_ready;                                                     // Dip_Switch_s1_agent:rf_sink_ready -> Dip_Switch_s1_agent_rsp_fifo:out_ready
	wire          dip_switch_s1_agent_rsp_fifo_out_startofpacket;                                             // Dip_Switch_s1_agent_rsp_fifo:out_startofpacket -> Dip_Switch_s1_agent:rf_sink_startofpacket
	wire          dip_switch_s1_agent_rsp_fifo_out_endofpacket;                                               // Dip_Switch_s1_agent_rsp_fifo:out_endofpacket -> Dip_Switch_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                      // cmd_mux_010:src_valid -> Dip_Switch_s1_agent:cp_valid
	wire  [107:0] cmd_mux_010_src_data;                                                                       // cmd_mux_010:src_data -> Dip_Switch_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                      // Dip_Switch_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [15:0] cmd_mux_010_src_channel;                                                                    // cmd_mux_010:src_channel -> Dip_Switch_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                              // cmd_mux_010:src_startofpacket -> Dip_Switch_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                // cmd_mux_010:src_endofpacket -> Dip_Switch_s1_agent:cp_endofpacket
	wire   [31:0] push_button_s1_agent_m0_readdata;                                                           // Push_Button_s1_translator:uav_readdata -> Push_Button_s1_agent:m0_readdata
	wire          push_button_s1_agent_m0_waitrequest;                                                        // Push_Button_s1_translator:uav_waitrequest -> Push_Button_s1_agent:m0_waitrequest
	wire          push_button_s1_agent_m0_debugaccess;                                                        // Push_Button_s1_agent:m0_debugaccess -> Push_Button_s1_translator:uav_debugaccess
	wire   [31:0] push_button_s1_agent_m0_address;                                                            // Push_Button_s1_agent:m0_address -> Push_Button_s1_translator:uav_address
	wire    [3:0] push_button_s1_agent_m0_byteenable;                                                         // Push_Button_s1_agent:m0_byteenable -> Push_Button_s1_translator:uav_byteenable
	wire          push_button_s1_agent_m0_read;                                                               // Push_Button_s1_agent:m0_read -> Push_Button_s1_translator:uav_read
	wire          push_button_s1_agent_m0_readdatavalid;                                                      // Push_Button_s1_translator:uav_readdatavalid -> Push_Button_s1_agent:m0_readdatavalid
	wire          push_button_s1_agent_m0_lock;                                                               // Push_Button_s1_agent:m0_lock -> Push_Button_s1_translator:uav_lock
	wire   [31:0] push_button_s1_agent_m0_writedata;                                                          // Push_Button_s1_agent:m0_writedata -> Push_Button_s1_translator:uav_writedata
	wire          push_button_s1_agent_m0_write;                                                              // Push_Button_s1_agent:m0_write -> Push_Button_s1_translator:uav_write
	wire    [2:0] push_button_s1_agent_m0_burstcount;                                                         // Push_Button_s1_agent:m0_burstcount -> Push_Button_s1_translator:uav_burstcount
	wire          push_button_s1_agent_rf_source_valid;                                                       // Push_Button_s1_agent:rf_source_valid -> Push_Button_s1_agent_rsp_fifo:in_valid
	wire  [108:0] push_button_s1_agent_rf_source_data;                                                        // Push_Button_s1_agent:rf_source_data -> Push_Button_s1_agent_rsp_fifo:in_data
	wire          push_button_s1_agent_rf_source_ready;                                                       // Push_Button_s1_agent_rsp_fifo:in_ready -> Push_Button_s1_agent:rf_source_ready
	wire          push_button_s1_agent_rf_source_startofpacket;                                               // Push_Button_s1_agent:rf_source_startofpacket -> Push_Button_s1_agent_rsp_fifo:in_startofpacket
	wire          push_button_s1_agent_rf_source_endofpacket;                                                 // Push_Button_s1_agent:rf_source_endofpacket -> Push_Button_s1_agent_rsp_fifo:in_endofpacket
	wire          push_button_s1_agent_rsp_fifo_out_valid;                                                    // Push_Button_s1_agent_rsp_fifo:out_valid -> Push_Button_s1_agent:rf_sink_valid
	wire  [108:0] push_button_s1_agent_rsp_fifo_out_data;                                                     // Push_Button_s1_agent_rsp_fifo:out_data -> Push_Button_s1_agent:rf_sink_data
	wire          push_button_s1_agent_rsp_fifo_out_ready;                                                    // Push_Button_s1_agent:rf_sink_ready -> Push_Button_s1_agent_rsp_fifo:out_ready
	wire          push_button_s1_agent_rsp_fifo_out_startofpacket;                                            // Push_Button_s1_agent_rsp_fifo:out_startofpacket -> Push_Button_s1_agent:rf_sink_startofpacket
	wire          push_button_s1_agent_rsp_fifo_out_endofpacket;                                              // Push_Button_s1_agent_rsp_fifo:out_endofpacket -> Push_Button_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                      // cmd_mux_011:src_valid -> Push_Button_s1_agent:cp_valid
	wire  [107:0] cmd_mux_011_src_data;                                                                       // cmd_mux_011:src_data -> Push_Button_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                      // Push_Button_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [15:0] cmd_mux_011_src_channel;                                                                    // cmd_mux_011:src_channel -> Push_Button_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                              // cmd_mux_011:src_startofpacket -> Push_Button_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                // cmd_mux_011:src_endofpacket -> Push_Button_s1_agent:cp_endofpacket
	wire   [31:0] timer_s1_agent_m0_readdata;                                                                 // Timer_s1_translator:uav_readdata -> Timer_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                                              // Timer_s1_translator:uav_waitrequest -> Timer_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                                              // Timer_s1_agent:m0_debugaccess -> Timer_s1_translator:uav_debugaccess
	wire   [31:0] timer_s1_agent_m0_address;                                                                  // Timer_s1_agent:m0_address -> Timer_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                                               // Timer_s1_agent:m0_byteenable -> Timer_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                                     // Timer_s1_agent:m0_read -> Timer_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                                            // Timer_s1_translator:uav_readdatavalid -> Timer_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                                     // Timer_s1_agent:m0_lock -> Timer_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                                // Timer_s1_agent:m0_writedata -> Timer_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                                    // Timer_s1_agent:m0_write -> Timer_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                                               // Timer_s1_agent:m0_burstcount -> Timer_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                                             // Timer_s1_agent:rf_source_valid -> Timer_s1_agent_rsp_fifo:in_valid
	wire  [108:0] timer_s1_agent_rf_source_data;                                                              // Timer_s1_agent:rf_source_data -> Timer_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                                             // Timer_s1_agent_rsp_fifo:in_ready -> Timer_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                                     // Timer_s1_agent:rf_source_startofpacket -> Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                                       // Timer_s1_agent:rf_source_endofpacket -> Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                                          // Timer_s1_agent_rsp_fifo:out_valid -> Timer_s1_agent:rf_sink_valid
	wire  [108:0] timer_s1_agent_rsp_fifo_out_data;                                                           // Timer_s1_agent_rsp_fifo:out_data -> Timer_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                                          // Timer_s1_agent:rf_sink_ready -> Timer_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                                  // Timer_s1_agent_rsp_fifo:out_startofpacket -> Timer_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                                    // Timer_s1_agent_rsp_fifo:out_endofpacket -> Timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                      // cmd_mux_012:src_valid -> Timer_s1_agent:cp_valid
	wire  [107:0] cmd_mux_012_src_data;                                                                       // cmd_mux_012:src_data -> Timer_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                      // Timer_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [15:0] cmd_mux_012_src_channel;                                                                    // cmd_mux_012:src_channel -> Timer_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                              // cmd_mux_012:src_startofpacket -> Timer_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                // cmd_mux_012:src_endofpacket -> Timer_s1_agent:cp_endofpacket
	wire   [31:0] rom_s1_agent_m0_readdata;                                                                   // ROM_s1_translator:uav_readdata -> ROM_s1_agent:m0_readdata
	wire          rom_s1_agent_m0_waitrequest;                                                                // ROM_s1_translator:uav_waitrequest -> ROM_s1_agent:m0_waitrequest
	wire          rom_s1_agent_m0_debugaccess;                                                                // ROM_s1_agent:m0_debugaccess -> ROM_s1_translator:uav_debugaccess
	wire   [31:0] rom_s1_agent_m0_address;                                                                    // ROM_s1_agent:m0_address -> ROM_s1_translator:uav_address
	wire    [3:0] rom_s1_agent_m0_byteenable;                                                                 // ROM_s1_agent:m0_byteenable -> ROM_s1_translator:uav_byteenable
	wire          rom_s1_agent_m0_read;                                                                       // ROM_s1_agent:m0_read -> ROM_s1_translator:uav_read
	wire          rom_s1_agent_m0_readdatavalid;                                                              // ROM_s1_translator:uav_readdatavalid -> ROM_s1_agent:m0_readdatavalid
	wire          rom_s1_agent_m0_lock;                                                                       // ROM_s1_agent:m0_lock -> ROM_s1_translator:uav_lock
	wire   [31:0] rom_s1_agent_m0_writedata;                                                                  // ROM_s1_agent:m0_writedata -> ROM_s1_translator:uav_writedata
	wire          rom_s1_agent_m0_write;                                                                      // ROM_s1_agent:m0_write -> ROM_s1_translator:uav_write
	wire    [2:0] rom_s1_agent_m0_burstcount;                                                                 // ROM_s1_agent:m0_burstcount -> ROM_s1_translator:uav_burstcount
	wire          rom_s1_agent_rf_source_valid;                                                               // ROM_s1_agent:rf_source_valid -> ROM_s1_agent_rsp_fifo:in_valid
	wire  [108:0] rom_s1_agent_rf_source_data;                                                                // ROM_s1_agent:rf_source_data -> ROM_s1_agent_rsp_fifo:in_data
	wire          rom_s1_agent_rf_source_ready;                                                               // ROM_s1_agent_rsp_fifo:in_ready -> ROM_s1_agent:rf_source_ready
	wire          rom_s1_agent_rf_source_startofpacket;                                                       // ROM_s1_agent:rf_source_startofpacket -> ROM_s1_agent_rsp_fifo:in_startofpacket
	wire          rom_s1_agent_rf_source_endofpacket;                                                         // ROM_s1_agent:rf_source_endofpacket -> ROM_s1_agent_rsp_fifo:in_endofpacket
	wire          rom_s1_agent_rsp_fifo_out_valid;                                                            // ROM_s1_agent_rsp_fifo:out_valid -> ROM_s1_agent:rf_sink_valid
	wire  [108:0] rom_s1_agent_rsp_fifo_out_data;                                                             // ROM_s1_agent_rsp_fifo:out_data -> ROM_s1_agent:rf_sink_data
	wire          rom_s1_agent_rsp_fifo_out_ready;                                                            // ROM_s1_agent:rf_sink_ready -> ROM_s1_agent_rsp_fifo:out_ready
	wire          rom_s1_agent_rsp_fifo_out_startofpacket;                                                    // ROM_s1_agent_rsp_fifo:out_startofpacket -> ROM_s1_agent:rf_sink_startofpacket
	wire          rom_s1_agent_rsp_fifo_out_endofpacket;                                                      // ROM_s1_agent_rsp_fifo:out_endofpacket -> ROM_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                      // cmd_mux_013:src_valid -> ROM_s1_agent:cp_valid
	wire  [107:0] cmd_mux_013_src_data;                                                                       // cmd_mux_013:src_data -> ROM_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                      // ROM_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [15:0] cmd_mux_013_src_channel;                                                                    // cmd_mux_013:src_channel -> ROM_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                              // cmd_mux_013:src_startofpacket -> ROM_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                // cmd_mux_013:src_endofpacket -> ROM_s1_agent:cp_endofpacket
	wire   [31:0] ram_s1_agent_m0_readdata;                                                                   // RAM_s1_translator:uav_readdata -> RAM_s1_agent:m0_readdata
	wire          ram_s1_agent_m0_waitrequest;                                                                // RAM_s1_translator:uav_waitrequest -> RAM_s1_agent:m0_waitrequest
	wire          ram_s1_agent_m0_debugaccess;                                                                // RAM_s1_agent:m0_debugaccess -> RAM_s1_translator:uav_debugaccess
	wire   [31:0] ram_s1_agent_m0_address;                                                                    // RAM_s1_agent:m0_address -> RAM_s1_translator:uav_address
	wire    [3:0] ram_s1_agent_m0_byteenable;                                                                 // RAM_s1_agent:m0_byteenable -> RAM_s1_translator:uav_byteenable
	wire          ram_s1_agent_m0_read;                                                                       // RAM_s1_agent:m0_read -> RAM_s1_translator:uav_read
	wire          ram_s1_agent_m0_readdatavalid;                                                              // RAM_s1_translator:uav_readdatavalid -> RAM_s1_agent:m0_readdatavalid
	wire          ram_s1_agent_m0_lock;                                                                       // RAM_s1_agent:m0_lock -> RAM_s1_translator:uav_lock
	wire   [31:0] ram_s1_agent_m0_writedata;                                                                  // RAM_s1_agent:m0_writedata -> RAM_s1_translator:uav_writedata
	wire          ram_s1_agent_m0_write;                                                                      // RAM_s1_agent:m0_write -> RAM_s1_translator:uav_write
	wire    [2:0] ram_s1_agent_m0_burstcount;                                                                 // RAM_s1_agent:m0_burstcount -> RAM_s1_translator:uav_burstcount
	wire          ram_s1_agent_rf_source_valid;                                                               // RAM_s1_agent:rf_source_valid -> RAM_s1_agent_rsp_fifo:in_valid
	wire  [108:0] ram_s1_agent_rf_source_data;                                                                // RAM_s1_agent:rf_source_data -> RAM_s1_agent_rsp_fifo:in_data
	wire          ram_s1_agent_rf_source_ready;                                                               // RAM_s1_agent_rsp_fifo:in_ready -> RAM_s1_agent:rf_source_ready
	wire          ram_s1_agent_rf_source_startofpacket;                                                       // RAM_s1_agent:rf_source_startofpacket -> RAM_s1_agent_rsp_fifo:in_startofpacket
	wire          ram_s1_agent_rf_source_endofpacket;                                                         // RAM_s1_agent:rf_source_endofpacket -> RAM_s1_agent_rsp_fifo:in_endofpacket
	wire          ram_s1_agent_rsp_fifo_out_valid;                                                            // RAM_s1_agent_rsp_fifo:out_valid -> RAM_s1_agent:rf_sink_valid
	wire  [108:0] ram_s1_agent_rsp_fifo_out_data;                                                             // RAM_s1_agent_rsp_fifo:out_data -> RAM_s1_agent:rf_sink_data
	wire          ram_s1_agent_rsp_fifo_out_ready;                                                            // RAM_s1_agent:rf_sink_ready -> RAM_s1_agent_rsp_fifo:out_ready
	wire          ram_s1_agent_rsp_fifo_out_startofpacket;                                                    // RAM_s1_agent_rsp_fifo:out_startofpacket -> RAM_s1_agent:rf_sink_startofpacket
	wire          ram_s1_agent_rsp_fifo_out_endofpacket;                                                      // RAM_s1_agent_rsp_fifo:out_endofpacket -> RAM_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                      // cmd_mux_014:src_valid -> RAM_s1_agent:cp_valid
	wire  [107:0] cmd_mux_014_src_data;                                                                       // cmd_mux_014:src_data -> RAM_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                      // RAM_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [15:0] cmd_mux_014_src_channel;                                                                    // cmd_mux_014:src_channel -> RAM_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                              // cmd_mux_014:src_startofpacket -> RAM_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                // cmd_mux_014:src_endofpacket -> RAM_s1_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                 // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                              // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                              // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                  // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                               // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                     // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                            // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                     // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                                // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                    // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                               // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                             // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire   [90:0] sdram_s1_agent_rf_source_data;                                                              // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                             // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                     // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                       // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                          // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire   [90:0] sdram_s1_agent_rsp_fifo_out_data;                                                           // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                          // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                  // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                    // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                        // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                         // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                        // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire          ev19_core_0_data_master_agent_cp_valid;                                                     // EV19_Core_0_Data_Master_agent:cp_valid -> router:sink_valid
	wire  [107:0] ev19_core_0_data_master_agent_cp_data;                                                      // EV19_Core_0_Data_Master_agent:cp_data -> router:sink_data
	wire          ev19_core_0_data_master_agent_cp_ready;                                                     // router:sink_ready -> EV19_Core_0_Data_Master_agent:cp_ready
	wire          ev19_core_0_data_master_agent_cp_startofpacket;                                             // EV19_Core_0_Data_Master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          ev19_core_0_data_master_agent_cp_endofpacket;                                               // EV19_Core_0_Data_Master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                           // router:src_valid -> cmd_demux:sink_valid
	wire  [107:0] router_src_data;                                                                            // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                           // cmd_demux:sink_ready -> router:src_ready
	wire   [15:0] router_src_channel;                                                                         // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                   // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                     // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          vga_pixel_buffer_master_agent_cp_valid;                                                     // VGA_pixel_buffer_master_agent:cp_valid -> router_001:sink_valid
	wire   [89:0] vga_pixel_buffer_master_agent_cp_data;                                                      // VGA_pixel_buffer_master_agent:cp_data -> router_001:sink_data
	wire          vga_pixel_buffer_master_agent_cp_ready;                                                     // router_001:sink_ready -> VGA_pixel_buffer_master_agent:cp_ready
	wire          vga_pixel_buffer_master_agent_cp_startofpacket;                                             // VGA_pixel_buffer_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          vga_pixel_buffer_master_agent_cp_endofpacket;                                               // VGA_pixel_buffer_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                       // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [89:0] router_001_src_data;                                                                        // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                       // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [15:0] router_001_src_channel;                                                                     // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                               // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                 // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          ev19_core_0_instruction_master_agent_cp_valid;                                              // EV19_Core_0_Instruction_Master_agent:cp_valid -> router_002:sink_valid
	wire  [107:0] ev19_core_0_instruction_master_agent_cp_data;                                               // EV19_Core_0_Instruction_Master_agent:cp_data -> router_002:sink_data
	wire          ev19_core_0_instruction_master_agent_cp_ready;                                              // router_002:sink_ready -> EV19_Core_0_Instruction_Master_agent:cp_ready
	wire          ev19_core_0_instruction_master_agent_cp_startofpacket;                                      // EV19_Core_0_Instruction_Master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          ev19_core_0_instruction_master_agent_cp_endofpacket;                                        // EV19_Core_0_Instruction_Master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                       // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [107:0] router_002_src_data;                                                                        // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                       // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [15:0] router_002_src_channel;                                                                     // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                               // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                 // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          adc_adc_slave_agent_rp_valid;                                                               // ADC_adc_slave_agent:rp_valid -> router_003:sink_valid
	wire  [107:0] adc_adc_slave_agent_rp_data;                                                                // ADC_adc_slave_agent:rp_data -> router_003:sink_data
	wire          adc_adc_slave_agent_rp_ready;                                                               // router_003:sink_ready -> ADC_adc_slave_agent:rp_ready
	wire          adc_adc_slave_agent_rp_startofpacket;                                                       // ADC_adc_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          adc_adc_slave_agent_rp_endofpacket;                                                         // ADC_adc_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                       // router_003:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_003_src_data;                                                                        // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                       // rsp_demux:sink_ready -> router_003:src_ready
	wire   [15:0] router_003_src_channel;                                                                     // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                               // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                 // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          keyboard_avalon_ps2_slave_agent_rp_valid;                                                   // Keyboard_avalon_ps2_slave_agent:rp_valid -> router_004:sink_valid
	wire  [107:0] keyboard_avalon_ps2_slave_agent_rp_data;                                                    // Keyboard_avalon_ps2_slave_agent:rp_data -> router_004:sink_data
	wire          keyboard_avalon_ps2_slave_agent_rp_ready;                                                   // router_004:sink_ready -> Keyboard_avalon_ps2_slave_agent:rp_ready
	wire          keyboard_avalon_ps2_slave_agent_rp_startofpacket;                                           // Keyboard_avalon_ps2_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          keyboard_avalon_ps2_slave_agent_rp_endofpacket;                                             // Keyboard_avalon_ps2_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                       // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_004_src_data;                                                                        // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                       // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [15:0] router_004_src_channel;                                                                     // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                               // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                 // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          vga_char_buffer_control_slave_agent_rp_valid;                                               // VGA_char_buffer_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] vga_char_buffer_control_slave_agent_rp_data;                                                // VGA_char_buffer_control_slave_agent:rp_data -> router_005:sink_data
	wire          vga_char_buffer_control_slave_agent_rp_ready;                                               // router_005:sink_ready -> VGA_char_buffer_control_slave_agent:rp_ready
	wire          vga_char_buffer_control_slave_agent_rp_startofpacket;                                       // VGA_char_buffer_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          vga_char_buffer_control_slave_agent_rp_endofpacket;                                         // VGA_char_buffer_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                       // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_005_src_data;                                                                        // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                       // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [15:0] router_005_src_channel;                                                                     // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                               // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                 // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          vga_char_buffersource_slave_agent_rp_valid;                                                 // VGA_char_buffersource_slave_agent:rp_valid -> router_006:sink_valid
	wire   [80:0] vga_char_buffersource_slave_agent_rp_data;                                                  // VGA_char_buffersource_slave_agent:rp_data -> router_006:sink_data
	wire          vga_char_buffersource_slave_agent_rp_ready;                                                 // router_006:sink_ready -> VGA_char_buffersource_slave_agent:rp_ready
	wire          vga_char_buffersource_slave_agent_rp_startofpacket;                                         // VGA_char_buffersource_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          vga_char_buffersource_slave_agent_rp_endofpacket;                                           // VGA_char_buffersource_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                       // router_006:src_valid -> rsp_demux_003:sink_valid
	wire   [80:0] router_006_src_data;                                                                        // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                       // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [15:0] router_006_src_channel;                                                                     // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                               // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                 // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          id_control_slave_agent_rp_valid;                                                            // ID_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] id_control_slave_agent_rp_data;                                                             // ID_control_slave_agent:rp_data -> router_007:sink_data
	wire          id_control_slave_agent_rp_ready;                                                            // router_007:sink_ready -> ID_control_slave_agent:rp_ready
	wire          id_control_slave_agent_rp_startofpacket;                                                    // ID_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          id_control_slave_agent_rp_endofpacket;                                                      // ID_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                       // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_007_src_data;                                                                        // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                       // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [15:0] router_007_src_channel;                                                                     // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                               // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                 // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          performance_counter_control_slave_agent_rp_valid;                                           // Performance_Counter_control_slave_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] performance_counter_control_slave_agent_rp_data;                                            // Performance_Counter_control_slave_agent:rp_data -> router_008:sink_data
	wire          performance_counter_control_slave_agent_rp_ready;                                           // router_008:sink_ready -> Performance_Counter_control_slave_agent:rp_ready
	wire          performance_counter_control_slave_agent_rp_startofpacket;                                   // Performance_Counter_control_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          performance_counter_control_slave_agent_rp_endofpacket;                                     // Performance_Counter_control_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                       // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_008_src_data;                                                                        // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                                       // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [15:0] router_008_src_channel;                                                                     // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                               // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                 // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          vga_pixel_buffer_slave_agent_rp_valid;                                                      // VGA_pixel_buffer_slave_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] vga_pixel_buffer_slave_agent_rp_data;                                                       // VGA_pixel_buffer_slave_agent:rp_data -> router_009:sink_data
	wire          vga_pixel_buffer_slave_agent_rp_ready;                                                      // router_009:sink_ready -> VGA_pixel_buffer_slave_agent:rp_ready
	wire          vga_pixel_buffer_slave_agent_rp_startofpacket;                                              // VGA_pixel_buffer_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          vga_pixel_buffer_slave_agent_rp_endofpacket;                                                // VGA_pixel_buffer_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                       // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_009_src_data;                                                                        // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                                       // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [15:0] router_009_src_channel;                                                                     // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                               // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                 // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          pll_pll_slave_agent_rp_valid;                                                               // PLL_pll_slave_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] pll_pll_slave_agent_rp_data;                                                                // PLL_pll_slave_agent:rp_data -> router_010:sink_data
	wire          pll_pll_slave_agent_rp_ready;                                                               // router_010:sink_ready -> PLL_pll_slave_agent:rp_ready
	wire          pll_pll_slave_agent_rp_startofpacket;                                                       // PLL_pll_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          pll_pll_slave_agent_rp_endofpacket;                                                         // PLL_pll_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                       // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_010_src_data;                                                                        // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                                       // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [15:0] router_010_src_channel;                                                                     // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                               // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                 // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          vga_rgb_resampler_slave_agent_rp_valid;                                                     // VGA_rgb_resampler_slave_agent:rp_valid -> router_011:sink_valid
	wire  [107:0] vga_rgb_resampler_slave_agent_rp_data;                                                      // VGA_rgb_resampler_slave_agent:rp_data -> router_011:sink_data
	wire          vga_rgb_resampler_slave_agent_rp_ready;                                                     // router_011:sink_ready -> VGA_rgb_resampler_slave_agent:rp_ready
	wire          vga_rgb_resampler_slave_agent_rp_startofpacket;                                             // VGA_rgb_resampler_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          vga_rgb_resampler_slave_agent_rp_endofpacket;                                               // VGA_rgb_resampler_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                       // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_011_src_data;                                                                        // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                                       // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [15:0] router_011_src_channel;                                                                     // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                               // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                 // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                                     // LEDs_s1_agent:rp_valid -> router_012:sink_valid
	wire  [107:0] leds_s1_agent_rp_data;                                                                      // LEDs_s1_agent:rp_data -> router_012:sink_data
	wire          leds_s1_agent_rp_ready;                                                                     // router_012:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                             // LEDs_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                               // LEDs_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                       // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [107:0] router_012_src_data;                                                                        // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                                       // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [15:0] router_012_src_channel;                                                                     // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                               // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                 // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          dip_switch_s1_agent_rp_valid;                                                               // Dip_Switch_s1_agent:rp_valid -> router_013:sink_valid
	wire  [107:0] dip_switch_s1_agent_rp_data;                                                                // Dip_Switch_s1_agent:rp_data -> router_013:sink_data
	wire          dip_switch_s1_agent_rp_ready;                                                               // router_013:sink_ready -> Dip_Switch_s1_agent:rp_ready
	wire          dip_switch_s1_agent_rp_startofpacket;                                                       // Dip_Switch_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          dip_switch_s1_agent_rp_endofpacket;                                                         // Dip_Switch_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                       // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [107:0] router_013_src_data;                                                                        // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                                       // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [15:0] router_013_src_channel;                                                                     // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                                               // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                 // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          push_button_s1_agent_rp_valid;                                                              // Push_Button_s1_agent:rp_valid -> router_014:sink_valid
	wire  [107:0] push_button_s1_agent_rp_data;                                                               // Push_Button_s1_agent:rp_data -> router_014:sink_data
	wire          push_button_s1_agent_rp_ready;                                                              // router_014:sink_ready -> Push_Button_s1_agent:rp_ready
	wire          push_button_s1_agent_rp_startofpacket;                                                      // Push_Button_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          push_button_s1_agent_rp_endofpacket;                                                        // Push_Button_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                       // router_014:src_valid -> rsp_demux_011:sink_valid
	wire  [107:0] router_014_src_data;                                                                        // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                                       // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [15:0] router_014_src_channel;                                                                     // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                                               // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                 // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                                    // Timer_s1_agent:rp_valid -> router_015:sink_valid
	wire  [107:0] timer_s1_agent_rp_data;                                                                     // Timer_s1_agent:rp_data -> router_015:sink_data
	wire          timer_s1_agent_rp_ready;                                                                    // router_015:sink_ready -> Timer_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                                            // Timer_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                                              // Timer_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                       // router_015:src_valid -> rsp_demux_012:sink_valid
	wire  [107:0] router_015_src_data;                                                                        // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                                       // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [15:0] router_015_src_channel;                                                                     // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                                               // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                 // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          rom_s1_agent_rp_valid;                                                                      // ROM_s1_agent:rp_valid -> router_016:sink_valid
	wire  [107:0] rom_s1_agent_rp_data;                                                                       // ROM_s1_agent:rp_data -> router_016:sink_data
	wire          rom_s1_agent_rp_ready;                                                                      // router_016:sink_ready -> ROM_s1_agent:rp_ready
	wire          rom_s1_agent_rp_startofpacket;                                                              // ROM_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          rom_s1_agent_rp_endofpacket;                                                                // ROM_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                       // router_016:src_valid -> rsp_demux_013:sink_valid
	wire  [107:0] router_016_src_data;                                                                        // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                                       // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [15:0] router_016_src_channel;                                                                     // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                                               // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                 // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          ram_s1_agent_rp_valid;                                                                      // RAM_s1_agent:rp_valid -> router_017:sink_valid
	wire  [107:0] ram_s1_agent_rp_data;                                                                       // RAM_s1_agent:rp_data -> router_017:sink_data
	wire          ram_s1_agent_rp_ready;                                                                      // router_017:sink_ready -> RAM_s1_agent:rp_ready
	wire          ram_s1_agent_rp_startofpacket;                                                              // RAM_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          ram_s1_agent_rp_endofpacket;                                                                // RAM_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                       // router_017:src_valid -> rsp_demux_014:sink_valid
	wire  [107:0] router_017_src_data;                                                                        // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                                       // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [15:0] router_017_src_channel;                                                                     // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                                               // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                 // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                    // SDRAM_s1_agent:rp_valid -> router_018:sink_valid
	wire   [89:0] sdram_s1_agent_rp_data;                                                                     // SDRAM_s1_agent:rp_data -> router_018:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                    // router_018:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                            // SDRAM_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                              // SDRAM_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                       // router_018:src_valid -> rsp_demux_015:sink_valid
	wire   [89:0] router_018_src_data;                                                                        // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                                       // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [15:0] router_018_src_channel;                                                                     // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                                               // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                 // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                      // cmd_mux_003:src_valid -> VGA_char_buffersource_slave_burst_adapter:sink0_valid
	wire   [80:0] cmd_mux_003_src_data;                                                                       // cmd_mux_003:src_data -> VGA_char_buffersource_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                      // VGA_char_buffersource_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [15:0] cmd_mux_003_src_channel;                                                                    // cmd_mux_003:src_channel -> VGA_char_buffersource_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                              // cmd_mux_003:src_startofpacket -> VGA_char_buffersource_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                // cmd_mux_003:src_endofpacket -> VGA_char_buffersource_slave_burst_adapter:sink0_endofpacket
	wire          vga_char_buffersource_slave_burst_adapter_source0_valid;                                    // VGA_char_buffersource_slave_burst_adapter:source0_valid -> VGA_char_buffersource_slave_agent:cp_valid
	wire   [80:0] vga_char_buffersource_slave_burst_adapter_source0_data;                                     // VGA_char_buffersource_slave_burst_adapter:source0_data -> VGA_char_buffersource_slave_agent:cp_data
	wire          vga_char_buffersource_slave_burst_adapter_source0_ready;                                    // VGA_char_buffersource_slave_agent:cp_ready -> VGA_char_buffersource_slave_burst_adapter:source0_ready
	wire   [15:0] vga_char_buffersource_slave_burst_adapter_source0_channel;                                  // VGA_char_buffersource_slave_burst_adapter:source0_channel -> VGA_char_buffersource_slave_agent:cp_channel
	wire          vga_char_buffersource_slave_burst_adapter_source0_startofpacket;                            // VGA_char_buffersource_slave_burst_adapter:source0_startofpacket -> VGA_char_buffersource_slave_agent:cp_startofpacket
	wire          vga_char_buffersource_slave_burst_adapter_source0_endofpacket;                              // VGA_char_buffersource_slave_burst_adapter:source0_endofpacket -> VGA_char_buffersource_slave_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                      // cmd_mux_015:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire   [89:0] cmd_mux_015_src_data;                                                                       // cmd_mux_015:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                                      // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [15:0] cmd_mux_015_src_channel;                                                                    // cmd_mux_015:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                              // cmd_mux_015:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                // cmd_mux_015:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                       // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire   [89:0] sdram_s1_burst_adapter_source0_data;                                                        // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                       // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire   [15:0] sdram_s1_burst_adapter_source0_channel;                                                     // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                               // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                 // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [15:0] cmd_demux_src0_channel;                                                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                       // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_src1_data;                                                                        // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                       // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [15:0] cmd_demux_src1_channel;                                                                     // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                               // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                 // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_src2_data;                                                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [15:0] cmd_demux_src2_channel;                                                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                       // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_src4_data;                                                                        // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                       // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [15:0] cmd_demux_src4_channel;                                                                     // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                               // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                 // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                       // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] cmd_demux_src5_data;                                                                        // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                       // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [15:0] cmd_demux_src5_channel;                                                                     // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                               // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                 // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                       // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] cmd_demux_src6_data;                                                                        // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                       // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [15:0] cmd_demux_src6_channel;                                                                     // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                               // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                 // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                       // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] cmd_demux_src7_data;                                                                        // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                       // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [15:0] cmd_demux_src7_channel;                                                                     // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                               // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                 // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                       // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] cmd_demux_src8_data;                                                                        // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                       // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [15:0] cmd_demux_src8_channel;                                                                     // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                               // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                 // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                       // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [107:0] cmd_demux_src9_data;                                                                        // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                       // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [15:0] cmd_demux_src9_channel;                                                                     // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                               // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                 // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                      // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [107:0] cmd_demux_src10_data;                                                                       // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                      // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [15:0] cmd_demux_src10_channel;                                                                    // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                              // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                                // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                      // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [107:0] cmd_demux_src11_data;                                                                       // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                      // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [15:0] cmd_demux_src11_channel;                                                                    // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                              // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                                // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                      // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [107:0] cmd_demux_src12_data;                                                                       // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                      // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [15:0] cmd_demux_src12_channel;                                                                    // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                              // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                                // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                      // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [107:0] cmd_demux_src13_data;                                                                       // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                      // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [15:0] cmd_demux_src13_channel;                                                                    // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                              // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                                // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                      // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [107:0] cmd_demux_src14_data;                                                                       // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                      // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [15:0] cmd_demux_src14_channel;                                                                    // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                              // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                                // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                   // cmd_demux_001:src0_valid -> cmd_mux_015:sink1_valid
	wire   [89:0] cmd_demux_001_src0_data;                                                                    // cmd_demux_001:src0_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                   // cmd_mux_015:sink1_ready -> cmd_demux_001:src0_ready
	wire   [15:0] cmd_demux_001_src0_channel;                                                                 // cmd_demux_001:src0_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                           // cmd_demux_001:src0_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                             // cmd_demux_001:src0_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                   // cmd_demux_002:src0_valid -> cmd_mux_013:sink1_valid
	wire  [107:0] cmd_demux_002_src0_data;                                                                    // cmd_demux_002:src0_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_002_src0_ready;                                                                   // cmd_mux_013:sink1_ready -> cmd_demux_002:src0_ready
	wire   [15:0] cmd_demux_002_src0_channel;                                                                 // cmd_demux_002:src0_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                                           // cmd_demux_002:src0_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                             // cmd_demux_002:src0_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [15:0] rsp_demux_src0_channel;                                                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                   // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                                    // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                   // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [15:0] rsp_demux_001_src0_channel;                                                                 // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                           // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                             // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [15:0] rsp_demux_002_src0_channel;                                                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                   // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                                    // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                   // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [15:0] rsp_demux_004_src0_channel;                                                                 // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                           // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                             // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                   // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                                    // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                   // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [15:0] rsp_demux_005_src0_channel;                                                                 // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                           // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                             // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                   // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                                    // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                   // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [15:0] rsp_demux_006_src0_channel;                                                                 // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                           // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                             // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                   // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                                    // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                   // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [15:0] rsp_demux_007_src0_channel;                                                                 // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                           // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                             // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                   // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                                    // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                   // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [15:0] rsp_demux_008_src0_channel;                                                                 // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                           // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                             // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                   // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [107:0] rsp_demux_009_src0_data;                                                                    // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                   // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [15:0] rsp_demux_009_src0_channel;                                                                 // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                           // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                             // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                   // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [107:0] rsp_demux_010_src0_data;                                                                    // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                   // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [15:0] rsp_demux_010_src0_channel;                                                                 // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                           // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                             // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                   // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [107:0] rsp_demux_011_src0_data;                                                                    // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                   // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [15:0] rsp_demux_011_src0_channel;                                                                 // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                           // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                             // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                   // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [107:0] rsp_demux_012_src0_data;                                                                    // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                   // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [15:0] rsp_demux_012_src0_channel;                                                                 // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                           // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                             // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                   // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [107:0] rsp_demux_013_src0_data;                                                                    // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                   // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [15:0] rsp_demux_013_src0_channel;                                                                 // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                           // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                             // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                                   // rsp_demux_013:src1_valid -> rsp_mux_002:sink0_valid
	wire  [107:0] rsp_demux_013_src1_data;                                                                    // rsp_demux_013:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_013_src1_ready;                                                                   // rsp_mux_002:sink0_ready -> rsp_demux_013:src1_ready
	wire   [15:0] rsp_demux_013_src1_channel;                                                                 // rsp_demux_013:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_013_src1_startofpacket;                                                           // rsp_demux_013:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                             // rsp_demux_013:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                   // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [107:0] rsp_demux_014_src0_data;                                                                    // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                   // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [15:0] rsp_demux_014_src0_channel;                                                                 // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                           // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                             // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src1_valid;                                                                   // rsp_demux_015:src1_valid -> rsp_mux_001:sink0_valid
	wire   [89:0] rsp_demux_015_src1_data;                                                                    // rsp_demux_015:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_015_src1_ready;                                                                   // rsp_mux_001:sink0_ready -> rsp_demux_015:src1_ready
	wire   [15:0] rsp_demux_015_src1_channel;                                                                 // rsp_demux_015:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_015_src1_startofpacket;                                                           // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                             // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                       // cmd_demux:src3_valid -> EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:in_valid
	wire  [107:0] cmd_demux_src3_data;                                                                        // cmd_demux:src3_data -> EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src3_ready;                                                                       // EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire   [15:0] cmd_demux_src3_channel;                                                                     // cmd_demux:src3_channel -> EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_startofpacket;                                                               // cmd_demux:src3_startofpacket -> EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                 // cmd_demux:src3_endofpacket -> EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:in_endofpacket
	wire          ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_valid;         // EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire   [80:0] ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_data;          // EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_ready;         // cmd_mux_003:sink0_ready -> EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:out_ready
	wire   [15:0] ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_channel;       // EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_startofpacket; // EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_endofpacket;   // EV19_Core_0_Data_Master_to_VGA_char_buffersource_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                      // cmd_demux:src15_valid -> EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [107:0] cmd_demux_src15_data;                                                                       // cmd_demux:src15_data -> EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src15_ready;                                                                      // EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux:src15_ready
	wire   [15:0] cmd_demux_src15_channel;                                                                    // cmd_demux:src15_channel -> EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src15_startofpacket;                                                              // cmd_demux:src15_startofpacket -> EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                                // cmd_demux:src15_endofpacket -> EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_valid;                            // EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_015:sink0_valid
	wire   [89:0] ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_data;                             // EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_015:sink0_data
	wire          ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_ready;                            // cmd_mux_015:sink0_ready -> EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [15:0] ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_channel;                          // EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_015:sink0_channel
	wire          ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                    // EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                      // EV19_Core_0_Data_Master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                   // rsp_demux_003:src0_valid -> VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_valid
	wire   [80:0] rsp_demux_003_src0_data;                                                                    // rsp_demux_003:src0_data -> VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                                   // VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire   [15:0] rsp_demux_003_src0_channel;                                                                 // rsp_demux_003:src0_channel -> VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                           // rsp_demux_003:src0_startofpacket -> VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                             // rsp_demux_003:src0_endofpacket -> VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_endofpacket
	wire          vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_valid;         // VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire  [107:0] vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_data;          // VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_ready;         // rsp_mux:sink3_ready -> VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_ready
	wire   [15:0] vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_channel;       // VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_startofpacket; // VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_endofpacket;   // VGA_char_buffersource_slave_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                   // rsp_demux_015:src0_valid -> SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_valid
	wire   [89:0] rsp_demux_015_src0_data;                                                                    // rsp_demux_015:src0_data -> SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_data
	wire          rsp_demux_015_src0_ready;                                                                   // SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_ready -> rsp_demux_015:src0_ready
	wire   [15:0] rsp_demux_015_src0_channel;                                                                 // rsp_demux_015:src0_channel -> SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                                           // rsp_demux_015:src0_startofpacket -> SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                             // rsp_demux_015:src0_endofpacket -> SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_valid;                            // SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_valid -> rsp_mux:sink15_valid
	wire  [107:0] sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_data;                             // SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_data -> rsp_mux:sink15_data
	wire          sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_ready;                            // rsp_mux:sink15_ready -> SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_ready
	wire   [15:0] sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_channel;                          // SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_channel -> rsp_mux:sink15_channel
	wire          sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_startofpacket;                    // SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_endofpacket;                      // SDRAM_s1_to_EV19_Core_0_Data_Master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          adc_adc_slave_agent_rdata_fifo_src_valid;                                                   // ADC_adc_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] adc_adc_slave_agent_rdata_fifo_src_data;                                                    // ADC_adc_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          adc_adc_slave_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter:in_0_ready -> ADC_adc_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                              // avalon_st_adapter:out_0_valid -> ADC_adc_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                               // avalon_st_adapter:out_0_data -> ADC_adc_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                              // ADC_adc_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                              // avalon_st_adapter:out_0_error -> ADC_adc_slave_agent:rdata_fifo_sink_error
	wire          keyboard_avalon_ps2_slave_agent_rdata_fifo_src_valid;                                       // Keyboard_avalon_ps2_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] keyboard_avalon_ps2_slave_agent_rdata_fifo_src_data;                                        // Keyboard_avalon_ps2_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          keyboard_avalon_ps2_slave_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_001:in_0_ready -> Keyboard_avalon_ps2_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                          // avalon_st_adapter_001:out_0_valid -> Keyboard_avalon_ps2_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                           // avalon_st_adapter_001:out_0_data -> Keyboard_avalon_ps2_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                          // Keyboard_avalon_ps2_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                          // avalon_st_adapter_001:out_0_error -> Keyboard_avalon_ps2_slave_agent:rdata_fifo_sink_error
	wire          vga_char_buffer_control_slave_agent_rdata_fifo_src_valid;                                   // VGA_char_buffer_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] vga_char_buffer_control_slave_agent_rdata_fifo_src_data;                                    // VGA_char_buffer_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          vga_char_buffer_control_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_002:in_0_ready -> VGA_char_buffer_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                          // avalon_st_adapter_002:out_0_valid -> VGA_char_buffer_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                           // avalon_st_adapter_002:out_0_data -> VGA_char_buffer_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                          // VGA_char_buffer_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                          // avalon_st_adapter_002:out_0_error -> VGA_char_buffer_control_slave_agent:rdata_fifo_sink_error
	wire          vga_char_buffersource_slave_agent_rdata_fifo_src_valid;                                     // VGA_char_buffersource_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire    [9:0] vga_char_buffersource_slave_agent_rdata_fifo_src_data;                                      // VGA_char_buffersource_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          vga_char_buffersource_slave_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_003:in_0_ready -> VGA_char_buffersource_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                          // avalon_st_adapter_003:out_0_valid -> VGA_char_buffersource_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_003_out_0_data;                                                           // avalon_st_adapter_003:out_0_data -> VGA_char_buffersource_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                          // VGA_char_buffersource_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                          // avalon_st_adapter_003:out_0_error -> VGA_char_buffersource_slave_agent:rdata_fifo_sink_error
	wire          id_control_slave_agent_rdata_fifo_src_valid;                                                // ID_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] id_control_slave_agent_rdata_fifo_src_data;                                                 // ID_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          id_control_slave_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_004:in_0_ready -> ID_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                          // avalon_st_adapter_004:out_0_valid -> ID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                           // avalon_st_adapter_004:out_0_data -> ID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                          // ID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                          // avalon_st_adapter_004:out_0_error -> ID_control_slave_agent:rdata_fifo_sink_error
	wire          performance_counter_control_slave_agent_rdata_fifo_src_valid;                               // Performance_Counter_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] performance_counter_control_slave_agent_rdata_fifo_src_data;                                // Performance_Counter_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          performance_counter_control_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_005:in_0_ready -> Performance_Counter_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                          // avalon_st_adapter_005:out_0_valid -> Performance_Counter_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                           // avalon_st_adapter_005:out_0_data -> Performance_Counter_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                          // Performance_Counter_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                          // avalon_st_adapter_005:out_0_error -> Performance_Counter_control_slave_agent:rdata_fifo_sink_error
	wire          vga_pixel_buffer_slave_agent_rdata_fifo_src_valid;                                          // VGA_pixel_buffer_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] vga_pixel_buffer_slave_agent_rdata_fifo_src_data;                                           // VGA_pixel_buffer_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          vga_pixel_buffer_slave_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_006:in_0_ready -> VGA_pixel_buffer_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                          // avalon_st_adapter_006:out_0_valid -> VGA_pixel_buffer_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                           // avalon_st_adapter_006:out_0_data -> VGA_pixel_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                          // VGA_pixel_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                          // avalon_st_adapter_006:out_0_error -> VGA_pixel_buffer_slave_agent:rdata_fifo_sink_error
	wire          pll_pll_slave_agent_rdata_fifo_src_valid;                                                   // PLL_pll_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] pll_pll_slave_agent_rdata_fifo_src_data;                                                    // PLL_pll_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          pll_pll_slave_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_007:in_0_ready -> PLL_pll_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                          // avalon_st_adapter_007:out_0_valid -> PLL_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                           // avalon_st_adapter_007:out_0_data -> PLL_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                          // PLL_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                          // avalon_st_adapter_007:out_0_error -> PLL_pll_slave_agent:rdata_fifo_sink_error
	wire          vga_rgb_resampler_slave_agent_rdata_fifo_src_valid;                                         // VGA_rgb_resampler_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] vga_rgb_resampler_slave_agent_rdata_fifo_src_data;                                          // VGA_rgb_resampler_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          vga_rgb_resampler_slave_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_008:in_0_ready -> VGA_rgb_resampler_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                          // avalon_st_adapter_008:out_0_valid -> VGA_rgb_resampler_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                           // avalon_st_adapter_008:out_0_data -> VGA_rgb_resampler_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                          // VGA_rgb_resampler_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                          // avalon_st_adapter_008:out_0_error -> VGA_rgb_resampler_slave_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                         // LEDs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                          // LEDs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                         // avalon_st_adapter_009:in_0_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                          // avalon_st_adapter_009:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                           // avalon_st_adapter_009:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                          // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                          // avalon_st_adapter_009:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          dip_switch_s1_agent_rdata_fifo_src_valid;                                                   // Dip_Switch_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] dip_switch_s1_agent_rdata_fifo_src_data;                                                    // Dip_Switch_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          dip_switch_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_010:in_0_ready -> Dip_Switch_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                          // avalon_st_adapter_010:out_0_valid -> Dip_Switch_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                           // avalon_st_adapter_010:out_0_data -> Dip_Switch_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                          // Dip_Switch_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                          // avalon_st_adapter_010:out_0_error -> Dip_Switch_s1_agent:rdata_fifo_sink_error
	wire          push_button_s1_agent_rdata_fifo_src_valid;                                                  // Push_Button_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] push_button_s1_agent_rdata_fifo_src_data;                                                   // Push_Button_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          push_button_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_011:in_0_ready -> Push_Button_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                          // avalon_st_adapter_011:out_0_valid -> Push_Button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                           // avalon_st_adapter_011:out_0_data -> Push_Button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                          // Push_Button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                          // avalon_st_adapter_011:out_0_error -> Push_Button_s1_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_src_valid;                                                        // Timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                                         // Timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_012:in_0_ready -> Timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                          // avalon_st_adapter_012:out_0_valid -> Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                           // avalon_st_adapter_012:out_0_data -> Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                          // Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                          // avalon_st_adapter_012:out_0_error -> Timer_s1_agent:rdata_fifo_sink_error
	wire          rom_s1_agent_rdata_fifo_src_valid;                                                          // ROM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] rom_s1_agent_rdata_fifo_src_data;                                                           // ROM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          rom_s1_agent_rdata_fifo_src_ready;                                                          // avalon_st_adapter_013:in_0_ready -> ROM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                          // avalon_st_adapter_013:out_0_valid -> ROM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                           // avalon_st_adapter_013:out_0_data -> ROM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                          // ROM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                          // avalon_st_adapter_013:out_0_error -> ROM_s1_agent:rdata_fifo_sink_error
	wire          ram_s1_agent_rdata_fifo_src_valid;                                                          // RAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] ram_s1_agent_rdata_fifo_src_data;                                                           // RAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          ram_s1_agent_rdata_fifo_src_ready;                                                          // avalon_st_adapter_014:in_0_ready -> RAM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                          // avalon_st_adapter_014:out_0_valid -> RAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                           // avalon_st_adapter_014:out_0_data -> RAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                          // RAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                          // avalon_st_adapter_014:out_0_error -> RAM_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                        // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                         // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_015:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                          // avalon_st_adapter_015:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_015_out_0_data;                                                           // avalon_st_adapter_015:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                          // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                          // avalon_st_adapter_015:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ev19_core_0_data_master_translator (
		.clk                    (PLL_c0_clk),                                                                 //                       clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (ev19_core_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ev19_core_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ev19_core_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ev19_core_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ev19_core_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ev19_core_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ev19_core_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ev19_core_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ev19_core_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ev19_core_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ev19_core_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (EV19_Core_0_Data_Master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (EV19_Core_0_Data_Master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (EV19_Core_0_Data_Master_byteenable),                                         //                          .byteenable
		.av_read                (EV19_Core_0_Data_Master_read),                                               //                          .read
		.av_readdata            (EV19_Core_0_Data_Master_readdata),                                           //                          .readdata
		.av_write               (EV19_Core_0_Data_Master_write),                                              //                          .write
		.av_writedata           (EV19_Core_0_Data_Master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vga_pixel_buffer_master_translator (
		.clk                    (PLL_c0_clk),                                                                 //                       clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (vga_pixel_buffer_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (vga_pixel_buffer_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (vga_pixel_buffer_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (vga_pixel_buffer_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (vga_pixel_buffer_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (vga_pixel_buffer_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (vga_pixel_buffer_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (vga_pixel_buffer_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (vga_pixel_buffer_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (vga_pixel_buffer_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (vga_pixel_buffer_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (VGA_pixel_buffer_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (VGA_pixel_buffer_master_waitrequest),                                        //                          .waitrequest
		.av_read                (VGA_pixel_buffer_master_read),                                               //                          .read
		.av_readdata            (VGA_pixel_buffer_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (VGA_pixel_buffer_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (VGA_pixel_buffer_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_byteenable          (2'b11),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_write               (1'b0),                                                                       //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ev19_core_0_instruction_master_translator (
		.clk                    (PLL_c0_clk),                                                                        //                       clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (ev19_core_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ev19_core_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ev19_core_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ev19_core_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ev19_core_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ev19_core_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ev19_core_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ev19_core_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ev19_core_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ev19_core_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ev19_core_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (EV19_Core_0_Instruction_Master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (EV19_Core_0_Instruction_Master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (EV19_Core_0_Instruction_Master_byteenable),                                         //                          .byteenable
		.av_read                (EV19_Core_0_Instruction_Master_read),                                               //                          .read
		.av_readdata            (EV19_Core_0_Instruction_Master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_readdatavalid       (),                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                              //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                              //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_adc_slave_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_adc_slave_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (adc_adc_slave_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (adc_adc_slave_agent_m0_read),                   //                         .read
		.uav_write              (adc_adc_slave_agent_m0_write),                  //                         .write
		.uav_waitrequest        (adc_adc_slave_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (adc_adc_slave_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (adc_adc_slave_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (adc_adc_slave_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (adc_adc_slave_agent_m0_writedata),              //                         .writedata
		.uav_lock               (adc_adc_slave_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (adc_adc_slave_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (ADC_adc_slave_address),                         //      avalon_anti_slave_0.address
		.av_write               (ADC_adc_slave_write),                           //                         .write
		.av_read                (ADC_adc_slave_read),                            //                         .read
		.av_readdata            (ADC_adc_slave_readdata),                        //                         .readdata
		.av_writedata           (ADC_adc_slave_writedata),                       //                         .writedata
		.av_waitrequest         (ADC_adc_slave_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keyboard_avalon_ps2_slave_translator (
		.clk                    (PLL_c0_clk),                                       //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (keyboard_avalon_ps2_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (keyboard_avalon_ps2_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (keyboard_avalon_ps2_slave_agent_m0_read),          //                         .read
		.uav_write              (keyboard_avalon_ps2_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (keyboard_avalon_ps2_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (keyboard_avalon_ps2_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (keyboard_avalon_ps2_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (keyboard_avalon_ps2_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (keyboard_avalon_ps2_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (keyboard_avalon_ps2_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (keyboard_avalon_ps2_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Keyboard_avalon_ps2_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Keyboard_avalon_ps2_slave_write),                  //                         .write
		.av_read                (Keyboard_avalon_ps2_slave_read),                   //                         .read
		.av_readdata            (Keyboard_avalon_ps2_slave_readdata),               //                         .readdata
		.av_writedata           (Keyboard_avalon_ps2_slave_writedata),              //                         .writedata
		.av_byteenable          (Keyboard_avalon_ps2_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Keyboard_avalon_ps2_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (Keyboard_avalon_ps2_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_char_buffer_control_slave_translator (
		.clk                    (PLL_c0_clk),                                           //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (vga_char_buffer_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_char_buffer_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_char_buffer_control_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_char_buffer_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_char_buffer_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_char_buffer_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_char_buffer_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_char_buffer_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_char_buffer_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_char_buffer_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_char_buffer_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGA_char_buffer_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (VGA_char_buffer_control_slave_write),                  //                         .write
		.av_read                (VGA_char_buffer_control_slave_read),                   //                         .read
		.av_readdata            (VGA_char_buffer_control_slave_readdata),               //                         .readdata
		.av_writedata           (VGA_char_buffer_control_slave_writedata),              //                         .writedata
		.av_byteenable          (VGA_char_buffer_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (VGA_char_buffer_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_char_buffersource_slave_translator (
		.clk                    (PLL_c0_clk),                                         //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (vga_char_buffersource_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_char_buffersource_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_char_buffersource_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_char_buffersource_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_char_buffersource_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_char_buffersource_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_char_buffersource_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_char_buffersource_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_char_buffersource_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_char_buffersource_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_char_buffersource_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGA_char_buffersource_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (VGA_char_buffersource_slave_write),                  //                         .write
		.av_read                (VGA_char_buffersource_slave_read),                   //                         .read
		.av_readdata            (VGA_char_buffersource_slave_readdata),               //                         .readdata
		.av_writedata           (VGA_char_buffersource_slave_writedata),              //                         .writedata
		.av_byteenable          (VGA_char_buffersource_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (VGA_char_buffersource_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (VGA_char_buffersource_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) id_control_slave_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (id_control_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (id_control_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (id_control_slave_agent_m0_read),                //                         .read
		.uav_write              (id_control_slave_agent_m0_write),               //                         .write
		.uav_waitrequest        (id_control_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (id_control_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (id_control_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (id_control_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (id_control_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock               (id_control_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (id_control_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (ID_control_slave_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (ID_control_slave_readdata),                     //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) performance_counter_control_slave_translator (
		.clk                    (PLL_c0_clk),                                               //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (performance_counter_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (performance_counter_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (performance_counter_control_slave_agent_m0_read),          //                         .read
		.uav_write              (performance_counter_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (performance_counter_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (performance_counter_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (performance_counter_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (performance_counter_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (performance_counter_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (performance_counter_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (performance_counter_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Performance_Counter_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Performance_Counter_control_slave_write),                  //                         .write
		.av_readdata            (Performance_Counter_control_slave_readdata),               //                         .readdata
		.av_writedata           (Performance_Counter_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (Performance_Counter_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_pixel_buffer_slave_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_pixel_buffer_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_pixel_buffer_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_pixel_buffer_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_pixel_buffer_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_pixel_buffer_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_pixel_buffer_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_pixel_buffer_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_pixel_buffer_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_pixel_buffer_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_pixel_buffer_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_pixel_buffer_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGA_pixel_buffer_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (VGA_pixel_buffer_slave_write),                  //                         .write
		.av_read                (VGA_pixel_buffer_slave_read),                   //                         .read
		.av_readdata            (VGA_pixel_buffer_slave_readdata),               //                         .readdata
		.av_writedata           (VGA_pixel_buffer_slave_writedata),              //                         .writedata
		.av_byteenable          (VGA_pixel_buffer_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pll_pll_slave_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pll_pll_slave_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (pll_pll_slave_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (pll_pll_slave_agent_m0_read),                   //                         .read
		.uav_write              (pll_pll_slave_agent_m0_write),                  //                         .write
		.uav_waitrequest        (pll_pll_slave_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (pll_pll_slave_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (pll_pll_slave_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (pll_pll_slave_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (pll_pll_slave_agent_m0_writedata),              //                         .writedata
		.uav_lock               (pll_pll_slave_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (pll_pll_slave_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (PLL_pll_slave_address),                         //      avalon_anti_slave_0.address
		.av_write               (PLL_pll_slave_write),                           //                         .write
		.av_read                (PLL_pll_slave_read),                            //                         .read
		.av_readdata            (PLL_pll_slave_readdata),                        //                         .readdata
		.av_writedata           (PLL_pll_slave_writedata),                       //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_rgb_resampler_slave_translator (
		.clk                    (PLL_c0_clk),                                     //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (vga_rgb_resampler_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_rgb_resampler_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_rgb_resampler_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_rgb_resampler_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_rgb_resampler_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_rgb_resampler_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_rgb_resampler_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_rgb_resampler_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_rgb_resampler_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_rgb_resampler_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_rgb_resampler_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_read                (VGA_rgb_resampler_slave_read),                   //      avalon_anti_slave_0.read
		.av_readdata            (VGA_rgb_resampler_slave_readdata),               //                         .readdata
		.av_address             (),                                               //              (terminated)
		.av_write               (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                         //                         .read
		.uav_write              (leds_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (LEDs_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                                 //                         .write
		.av_readdata            (LEDs_s1_readdata),                              //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                             //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dip_switch_s1_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dip_switch_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (dip_switch_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (dip_switch_s1_agent_m0_read),                   //                         .read
		.uav_write              (dip_switch_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (dip_switch_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (dip_switch_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (dip_switch_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (dip_switch_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (dip_switch_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (dip_switch_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (dip_switch_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (Dip_Switch_s1_address),                         //      avalon_anti_slave_0.address
		.av_readdata            (Dip_Switch_s1_readdata),                        //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) push_button_s1_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (push_button_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (push_button_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (push_button_s1_agent_m0_read),                  //                         .read
		.uav_write              (push_button_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (push_button_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (push_button_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (push_button_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (push_button_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (push_button_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (push_button_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (push_button_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (Push_Button_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (Push_Button_s1_readdata),                       //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                        //                         .read
		.uav_write              (timer_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (Timer_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (Timer_s1_write),                                //                         .write
		.av_readdata            (Timer_s1_readdata),                             //                         .readdata
		.av_writedata           (Timer_s1_writedata),                            //                         .writedata
		.av_chipselect          (Timer_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rom_s1_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rom_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (rom_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (rom_s1_agent_m0_read),                          //                         .read
		.uav_write              (rom_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (rom_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (rom_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (rom_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (rom_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (rom_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (rom_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (rom_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (ROM_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (ROM_s1_write),                                  //                         .write
		.av_readdata            (ROM_s1_readdata),                               //                         .readdata
		.av_writedata           (ROM_s1_writedata),                              //                         .writedata
		.av_byteenable          (ROM_s1_byteenable),                             //                         .byteenable
		.av_chipselect          (ROM_s1_chipselect),                             //                         .chipselect
		.av_clken               (ROM_s1_clken),                                  //                         .clken
		.av_debugaccess         (ROM_s1_debugaccess),                            //                         .debugaccess
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ram_s1_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ram_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (ram_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (ram_s1_agent_m0_read),                          //                         .read
		.uav_write              (ram_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (ram_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (ram_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (ram_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (ram_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (ram_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (ram_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (ram_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (RAM_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (RAM_s1_write),                                  //                         .write
		.av_readdata            (RAM_s1_readdata),                               //                         .readdata
		.av_writedata           (RAM_s1_writedata),                              //                         .writedata
		.av_byteenable          (RAM_s1_byteenable),                             //                         .byteenable
		.av_chipselect          (RAM_s1_chipselect),                             //                         .chipselect
		.av_clken               (RAM_s1_clken),                                  //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (PLL_c0_clk),                                    //                      clk.clk
		.reset                  (EV19_Core_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                        //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (SDRAM_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                //                         .write
		.av_read                (SDRAM_s1_read),                                 //                         .read
		.av_readdata            (SDRAM_s1_readdata),                             //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                            //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                           //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                        //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                          //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                           //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ev19_core_0_data_master_agent (
		.clk                   (PLL_c0_clk),                                                                 //       clk.clk
		.reset                 (EV19_Core_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (ev19_core_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ev19_core_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ev19_core_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ev19_core_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ev19_core_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ev19_core_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ev19_core_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ev19_core_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ev19_core_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ev19_core_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ev19_core_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ev19_core_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ev19_core_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ev19_core_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ev19_core_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ev19_core_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                          //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_QOS_H                 (68),
		.PKT_QOS_L                 (68),
		.PKT_DATA_SIDEBAND_H       (66),
		.PKT_DATA_SIDEBAND_L       (66),
		.PKT_ADDR_SIDEBAND_H       (65),
		.PKT_ADDR_SIDEBAND_L       (65),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_CACHE_H               (84),
		.PKT_CACHE_L               (81),
		.PKT_THREAD_ID_H           (77),
		.PKT_THREAD_ID_L           (77),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (73),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_pixel_buffer_master_agent (
		.clk                   (PLL_c0_clk),                                                                 //       clk.clk
		.reset                 (EV19_Core_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (vga_pixel_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (vga_pixel_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (vga_pixel_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (vga_pixel_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (vga_pixel_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (vga_pixel_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (vga_pixel_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (vga_pixel_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (vga_pixel_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (vga_pixel_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (vga_pixel_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (vga_pixel_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (vga_pixel_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (vga_pixel_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (vga_pixel_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (vga_pixel_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ev19_core_0_instruction_master_agent (
		.clk                   (PLL_c0_clk),                                                                        //       clk.clk
		.reset                 (EV19_Core_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (ev19_core_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ev19_core_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ev19_core_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ev19_core_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ev19_core_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ev19_core_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ev19_core_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ev19_core_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ev19_core_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ev19_core_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ev19_core_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ev19_core_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ev19_core_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ev19_core_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ev19_core_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ev19_core_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                             //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_adc_slave_agent (
		.clk                     (PLL_c0_clk),                                     //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (adc_adc_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (adc_adc_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (adc_adc_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (adc_adc_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (adc_adc_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (adc_adc_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (adc_adc_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (adc_adc_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (adc_adc_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (adc_adc_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (adc_adc_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (adc_adc_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (adc_adc_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (adc_adc_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (adc_adc_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (adc_adc_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                            //                .channel
		.rf_sink_ready           (adc_adc_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (adc_adc_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (adc_adc_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (adc_adc_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (adc_adc_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (adc_adc_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (adc_adc_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (adc_adc_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (adc_adc_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (adc_adc_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (adc_adc_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_adc_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (adc_adc_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_adc_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                     //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (adc_adc_slave_agent_rf_source_data),             //        in.data
		.in_valid          (adc_adc_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_adc_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_adc_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_adc_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_adc_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_adc_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_adc_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_adc_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_adc_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) keyboard_avalon_ps2_slave_agent (
		.clk                     (PLL_c0_clk),                                                 //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (keyboard_avalon_ps2_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (keyboard_avalon_ps2_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (keyboard_avalon_ps2_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (keyboard_avalon_ps2_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (keyboard_avalon_ps2_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (keyboard_avalon_ps2_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (keyboard_avalon_ps2_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (keyboard_avalon_ps2_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (keyboard_avalon_ps2_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (keyboard_avalon_ps2_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (keyboard_avalon_ps2_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (keyboard_avalon_ps2_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (keyboard_avalon_ps2_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (keyboard_avalon_ps2_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (keyboard_avalon_ps2_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (keyboard_avalon_ps2_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                    //                .channel
		.rf_sink_ready           (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (keyboard_avalon_ps2_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (keyboard_avalon_ps2_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (keyboard_avalon_ps2_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (keyboard_avalon_ps2_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (keyboard_avalon_ps2_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (keyboard_avalon_ps2_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keyboard_avalon_ps2_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (keyboard_avalon_ps2_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keyboard_avalon_ps2_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                                 //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (keyboard_avalon_ps2_slave_agent_rf_source_data),             //        in.data
		.in_valid          (keyboard_avalon_ps2_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (keyboard_avalon_ps2_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (keyboard_avalon_ps2_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (keyboard_avalon_ps2_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (keyboard_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_char_buffer_control_slave_agent (
		.clk                     (PLL_c0_clk),                                                     //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (vga_char_buffer_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_char_buffer_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_char_buffer_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_char_buffer_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_char_buffer_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_char_buffer_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_char_buffer_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_char_buffer_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_char_buffer_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_char_buffer_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_char_buffer_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_char_buffer_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_char_buffer_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_char_buffer_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_char_buffer_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_char_buffer_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (vga_char_buffer_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_char_buffer_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_char_buffer_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_char_buffer_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_char_buffer_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_char_buffer_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_char_buffer_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_char_buffer_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (vga_char_buffer_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_char_buffer_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_char_buffer_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_char_buffer_control_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                                     //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (vga_char_buffer_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_char_buffer_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_char_buffer_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_char_buffer_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_char_buffer_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_char_buffer_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_char_buffer_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_char_buffer_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (53),
		.PKT_BURST_SIZE_L          (51),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (58),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (50),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (60),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_char_buffersource_slave_agent (
		.clk                     (PLL_c0_clk),                                                      //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (vga_char_buffersource_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_char_buffersource_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_char_buffersource_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_char_buffersource_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_char_buffersource_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_char_buffersource_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_char_buffersource_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_char_buffersource_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_char_buffersource_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_char_buffersource_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_char_buffersource_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_char_buffersource_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_char_buffersource_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_char_buffersource_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_char_buffersource_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_char_buffersource_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_char_buffersource_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_char_buffersource_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_char_buffersource_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_char_buffersource_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_char_buffersource_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_char_buffersource_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_char_buffersource_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_char_buffersource_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_char_buffersource_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_char_buffersource_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_char_buffersource_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_char_buffersource_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_char_buffersource_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_char_buffersource_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_char_buffersource_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_char_buffersource_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (vga_char_buffersource_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_char_buffersource_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_char_buffersource_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_char_buffersource_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                                   //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (vga_char_buffersource_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_char_buffersource_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_char_buffersource_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_char_buffersource_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_char_buffersource_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_char_buffersource_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_char_buffersource_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_char_buffersource_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_char_buffersource_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_char_buffersource_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) id_control_slave_agent (
		.clk                     (PLL_c0_clk),                                        //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (id_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (id_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (id_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (id_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (id_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (id_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (id_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (id_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (id_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (id_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (id_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (id_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (id_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (id_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (id_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (id_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_004_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                           //                .channel
		.rf_sink_ready           (id_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (id_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (id_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (id_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (id_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (id_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (id_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (id_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (id_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (id_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (id_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (id_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (id_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) id_control_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                        //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (id_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (id_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (id_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (id_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (id_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (id_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (id_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (id_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (id_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (id_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) performance_counter_control_slave_agent (
		.clk                     (PLL_c0_clk),                                                         //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (performance_counter_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (performance_counter_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (performance_counter_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (performance_counter_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (performance_counter_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (performance_counter_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (performance_counter_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (performance_counter_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (performance_counter_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (performance_counter_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (performance_counter_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (performance_counter_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (performance_counter_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (performance_counter_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (performance_counter_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (performance_counter_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                            //                .channel
		.rf_sink_ready           (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (performance_counter_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (performance_counter_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (performance_counter_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (performance_counter_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (performance_counter_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (performance_counter_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (performance_counter_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (performance_counter_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (performance_counter_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) performance_counter_control_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                                         //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (performance_counter_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (performance_counter_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (performance_counter_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (performance_counter_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (performance_counter_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (performance_counter_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_pixel_buffer_slave_agent (
		.clk                     (PLL_c0_clk),                                              //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (vga_pixel_buffer_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_pixel_buffer_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_pixel_buffer_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_pixel_buffer_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_pixel_buffer_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_pixel_buffer_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_pixel_buffer_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_pixel_buffer_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_pixel_buffer_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_pixel_buffer_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_pixel_buffer_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_pixel_buffer_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_pixel_buffer_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_pixel_buffer_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_pixel_buffer_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_pixel_buffer_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                 //                .channel
		.rf_sink_ready           (vga_pixel_buffer_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_pixel_buffer_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_pixel_buffer_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_pixel_buffer_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_pixel_buffer_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_pixel_buffer_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_pixel_buffer_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_pixel_buffer_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_pixel_buffer_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_pixel_buffer_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (vga_pixel_buffer_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_pixel_buffer_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_pixel_buffer_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_pixel_buffer_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                              //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (vga_pixel_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_pixel_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_pixel_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_pixel_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_pixel_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_pixel_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_pixel_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_pixel_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_pixel_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_pixel_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pll_pll_slave_agent (
		.clk                     (PLL_c0_clk),                                     //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (pll_pll_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pll_pll_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pll_pll_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pll_pll_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pll_pll_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pll_pll_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pll_pll_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pll_pll_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pll_pll_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pll_pll_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pll_pll_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pll_pll_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pll_pll_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pll_pll_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pll_pll_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pll_pll_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (pll_pll_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pll_pll_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pll_pll_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pll_pll_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pll_pll_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pll_pll_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pll_pll_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pll_pll_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pll_pll_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pll_pll_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pll_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pll_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pll_pll_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                     //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pll_pll_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pll_pll_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pll_pll_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pll_pll_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pll_pll_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pll_pll_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pll_pll_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pll_pll_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pll_pll_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_rgb_resampler_slave_agent (
		.clk                     (PLL_c0_clk),                                               //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (vga_rgb_resampler_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_rgb_resampler_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_rgb_resampler_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_rgb_resampler_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_rgb_resampler_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_rgb_resampler_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_rgb_resampler_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_rgb_resampler_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_rgb_resampler_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_rgb_resampler_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_rgb_resampler_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_rgb_resampler_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_rgb_resampler_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_rgb_resampler_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_rgb_resampler_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_rgb_resampler_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                  //                .channel
		.rf_sink_ready           (vga_rgb_resampler_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_rgb_resampler_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_rgb_resampler_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_rgb_resampler_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_rgb_resampler_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_rgb_resampler_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_rgb_resampler_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_rgb_resampler_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_rgb_resampler_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_rgb_resampler_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (vga_rgb_resampler_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_rgb_resampler_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_rgb_resampler_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_rgb_resampler_slave_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                               //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vga_rgb_resampler_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_rgb_resampler_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_rgb_resampler_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_rgb_resampler_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_rgb_resampler_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_rgb_resampler_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_rgb_resampler_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_rgb_resampler_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_rgb_resampler_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_rgb_resampler_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (PLL_c0_clk),                                    //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_009_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                       //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),             //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                    //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dip_switch_s1_agent (
		.clk                     (PLL_c0_clk),                                     //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (dip_switch_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dip_switch_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dip_switch_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dip_switch_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dip_switch_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dip_switch_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dip_switch_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dip_switch_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dip_switch_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dip_switch_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dip_switch_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dip_switch_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dip_switch_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dip_switch_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dip_switch_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dip_switch_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_010_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                        //                .channel
		.rf_sink_ready           (dip_switch_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dip_switch_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dip_switch_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dip_switch_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dip_switch_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dip_switch_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dip_switch_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dip_switch_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dip_switch_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dip_switch_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),              //                .error
		.rdata_fifo_src_ready    (dip_switch_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dip_switch_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dip_switch_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dip_switch_s1_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                     //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (dip_switch_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dip_switch_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dip_switch_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dip_switch_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dip_switch_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dip_switch_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dip_switch_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dip_switch_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dip_switch_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dip_switch_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) push_button_s1_agent (
		.clk                     (PLL_c0_clk),                                      //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (push_button_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (push_button_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (push_button_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (push_button_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (push_button_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (push_button_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (push_button_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (push_button_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (push_button_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (push_button_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (push_button_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (push_button_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (push_button_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (push_button_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (push_button_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (push_button_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_011_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                         //                .channel
		.rf_sink_ready           (push_button_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (push_button_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (push_button_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (push_button_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (push_button_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (push_button_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (push_button_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (push_button_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (push_button_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (push_button_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),               //                .error
		.rdata_fifo_src_ready    (push_button_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (push_button_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (push_button_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) push_button_s1_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                      //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (push_button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (push_button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (push_button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (push_button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (push_button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (push_button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (push_button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (push_button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (push_button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (push_button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (PLL_c0_clk),                                    //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_012_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                       //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),             //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                    //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rom_s1_agent (
		.clk                     (PLL_c0_clk),                                    //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rom_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (rom_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (rom_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (rom_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (rom_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (rom_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (rom_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (rom_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (rom_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (rom_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (rom_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (rom_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (rom_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (rom_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (rom_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (rom_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                       //                .channel
		.rf_sink_ready           (rom_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (rom_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (rom_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (rom_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (rom_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (rom_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (rom_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (rom_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (rom_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (rom_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),             //                .error
		.rdata_fifo_src_ready    (rom_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rom_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (rom_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rom_s1_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                    //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rom_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (rom_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (rom_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (rom_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (rom_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (rom_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (rom_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (rom_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (rom_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (rom_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ram_s1_agent (
		.clk                     (PLL_c0_clk),                                    //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ram_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (ram_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (ram_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (ram_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (ram_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (ram_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (ram_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (ram_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (ram_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (ram_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (ram_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (ram_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (ram_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (ram_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (ram_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (ram_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_014_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                       //                .channel
		.rf_sink_ready           (ram_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (ram_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (ram_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (ram_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (ram_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (ram_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (ram_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (ram_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (ram_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (ram_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),             //                .error
		.rdata_fifo_src_ready    (ram_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (ram_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_s1_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                    //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ram_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (ram_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (ram_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (ram_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (ram_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (ram_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (ram_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (ram_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (ram_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (ram_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (PLL_c0_clk),                                    //             clk.clk
		.reset                   (EV19_Core_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (PLL_c0_clk),                                    //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (PLL_c0_clk),                                    //       clk.clk
		.reset             (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	EV19_SoC_mm_interconnect_0_router router (
		.sink_ready         (ev19_core_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ev19_core_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (ev19_core_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (ev19_core_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ev19_core_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                     //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                               //       src.ready
		.src_valid          (router_src_valid),                               //          .valid
		.src_data           (router_src_data),                                //          .data
		.src_channel        (router_src_channel),                             //          .channel
		.src_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                          //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (vga_pixel_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (vga_pixel_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (vga_pixel_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (vga_pixel_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_pixel_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                     //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                           //       src.ready
		.src_valid          (router_001_src_valid),                           //          .valid
		.src_data           (router_001_src_data),                            //          .data
		.src_channel        (router_001_src_channel),                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (ev19_core_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ev19_core_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (ev19_core_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (ev19_core_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ev19_core_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                            //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //       src.ready
		.src_valid          (router_002_src_valid),                                  //          .valid
		.src_data           (router_002_src_data),                                   //          .data
		.src_channel        (router_002_src_channel),                                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (adc_adc_slave_agent_rp_ready),                  //      sink.ready
		.sink_valid         (adc_adc_slave_agent_rp_valid),                  //          .valid
		.sink_data          (adc_adc_slave_agent_rp_data),                   //          .data
		.sink_startofpacket (adc_adc_slave_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (adc_adc_slave_agent_rp_endofpacket),            //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                          //       src.ready
		.src_valid          (router_003_src_valid),                          //          .valid
		.src_data           (router_003_src_data),                           //          .data
		.src_channel        (router_003_src_channel),                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (keyboard_avalon_ps2_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (keyboard_avalon_ps2_slave_agent_rp_valid),         //          .valid
		.sink_data          (keyboard_avalon_ps2_slave_agent_rp_data),          //          .data
		.sink_startofpacket (keyboard_avalon_ps2_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (keyboard_avalon_ps2_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                       //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_004_src_ready),                             //       src.ready
		.src_valid          (router_004_src_valid),                             //          .valid
		.src_data           (router_004_src_data),                              //          .data
		.src_channel        (router_004_src_channel),                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (vga_char_buffer_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_char_buffer_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_char_buffer_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_char_buffer_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_char_buffer_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                           //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_005_src_ready),                                 //       src.ready
		.src_valid          (router_005_src_valid),                                 //          .valid
		.src_data           (router_005_src_data),                                  //          .data
		.src_channel        (router_005_src_channel),                               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                            //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (vga_char_buffersource_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_char_buffersource_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_char_buffersource_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_char_buffersource_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_char_buffersource_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                         //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_006_src_ready),                               //       src.ready
		.src_valid          (router_006_src_valid),                               //          .valid
		.src_data           (router_006_src_data),                                //          .data
		.src_channel        (router_006_src_channel),                             //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (id_control_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (id_control_slave_agent_rp_valid),               //          .valid
		.sink_data          (id_control_slave_agent_rp_data),                //          .data
		.sink_startofpacket (id_control_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (id_control_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (performance_counter_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (performance_counter_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (performance_counter_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (performance_counter_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (performance_counter_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                               //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_008_src_ready),                                     //       src.ready
		.src_valid          (router_008_src_valid),                                     //          .valid
		.src_data           (router_008_src_data),                                      //          .data
		.src_channel        (router_008_src_channel),                                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (vga_pixel_buffer_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_pixel_buffer_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_pixel_buffer_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_pixel_buffer_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_pixel_buffer_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (pll_pll_slave_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pll_pll_slave_agent_rp_valid),                  //          .valid
		.sink_data          (pll_pll_slave_agent_rp_data),                   //          .data
		.sink_startofpacket (pll_pll_slave_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pll_pll_slave_agent_rp_endofpacket),            //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_011 (
		.sink_ready         (vga_rgb_resampler_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_rgb_resampler_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_rgb_resampler_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_rgb_resampler_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_rgb_resampler_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_c0_clk),                                     //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_012 (
		.sink_ready         (leds_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                        //          .valid
		.sink_data          (leds_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_013 (
		.sink_ready         (dip_switch_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (dip_switch_s1_agent_rp_valid),                  //          .valid
		.sink_data          (dip_switch_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (dip_switch_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (dip_switch_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_014 (
		.sink_ready         (push_button_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (push_button_s1_agent_rp_valid),                 //          .valid
		.sink_data          (push_button_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (push_button_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (push_button_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_015 (
		.sink_ready         (timer_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                       //          .valid
		.sink_data          (timer_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_016 router_016 (
		.sink_ready         (rom_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (rom_s1_agent_rp_valid),                         //          .valid
		.sink_data          (rom_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (rom_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (rom_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_003 router_017 (
		.sink_ready         (ram_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (ram_s1_agent_rp_valid),                         //          .valid
		.sink_data          (ram_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (ram_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (ram_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (sdram_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                       //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (58),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (53),
		.PKT_BURST_SIZE_L          (51),
		.PKT_BURST_TYPE_H          (55),
		.PKT_BURST_TYPE_L          (54),
		.PKT_BURSTWRAP_H           (50),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (81),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (50),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) vga_char_buffersource_slave_burst_adapter (
		.clk                   (PLL_c0_clk),                                                      //       cr0.clk
		.reset                 (EV19_Core_0_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                           //          .ready
		.source0_valid         (vga_char_buffersource_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_char_buffersource_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_char_buffersource_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_char_buffersource_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_char_buffersource_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_char_buffersource_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (PLL_c0_clk),                                    //       cr0.clk
		.reset                 (EV19_Core_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                          //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)           //          .ready
	);

	EV19_SoC_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                              //      sink.ready
		.sink_channel        (router_src_channel),                            //          .channel
		.sink_data           (router_src_data),                               //          .data
		.sink_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                        //          .endofpacket
		.sink_valid          (router_src_valid),                              //          .valid
		.src0_ready          (cmd_demux_src0_ready),                          //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                          //          .valid
		.src0_data           (cmd_demux_src0_data),                           //          .data
		.src0_channel        (cmd_demux_src0_channel),                        //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                          //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                          //          .valid
		.src1_data           (cmd_demux_src1_data),                           //          .data
		.src1_channel        (cmd_demux_src1_channel),                        //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                    //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                          //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                          //          .valid
		.src2_data           (cmd_demux_src2_data),                           //          .data
		.src2_channel        (cmd_demux_src2_channel),                        //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                    //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                          //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                          //          .valid
		.src3_data           (cmd_demux_src3_data),                           //          .data
		.src3_channel        (cmd_demux_src3_channel),                        //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                    //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                          //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                          //          .valid
		.src4_data           (cmd_demux_src4_data),                           //          .data
		.src4_channel        (cmd_demux_src4_channel),                        //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                    //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                          //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                          //          .valid
		.src5_data           (cmd_demux_src5_data),                           //          .data
		.src5_channel        (cmd_demux_src5_channel),                        //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                  //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                    //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                          //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                          //          .valid
		.src6_data           (cmd_demux_src6_data),                           //          .data
		.src6_channel        (cmd_demux_src6_channel),                        //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                    //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                          //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                          //          .valid
		.src7_data           (cmd_demux_src7_data),                           //          .data
		.src7_channel        (cmd_demux_src7_channel),                        //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                    //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                          //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                          //          .valid
		.src8_data           (cmd_demux_src8_data),                           //          .data
		.src8_channel        (cmd_demux_src8_channel),                        //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                    //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                          //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                          //          .valid
		.src9_data           (cmd_demux_src9_data),                           //          .data
		.src9_channel        (cmd_demux_src9_channel),                        //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                    //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                         //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                         //          .valid
		.src10_data          (cmd_demux_src10_data),                          //          .data
		.src10_channel       (cmd_demux_src10_channel),                       //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                   //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                         //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                         //          .valid
		.src11_data          (cmd_demux_src11_data),                          //          .data
		.src11_channel       (cmd_demux_src11_channel),                       //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                   //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                         //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                         //          .valid
		.src12_data          (cmd_demux_src12_data),                          //          .data
		.src12_channel       (cmd_demux_src12_channel),                       //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                 //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                   //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                         //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                         //          .valid
		.src13_data          (cmd_demux_src13_data),                          //          .data
		.src13_channel       (cmd_demux_src13_channel),                       //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                 //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                   //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                         //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                         //          .valid
		.src14_data          (cmd_demux_src14_data),                          //          .data
		.src14_channel       (cmd_demux_src14_channel),                       //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                 //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                   //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                         //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                         //          .valid
		.src15_data          (cmd_demux_src15_data),                          //          .data
		.src15_channel       (cmd_demux_src15_channel),                       //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                 //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket)                    //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                          //      sink.ready
		.sink_channel       (router_001_src_channel),                        //          .channel
		.sink_data          (router_001_src_data),                           //          .data
		.sink_startofpacket (router_001_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_001_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_001_src0_data),                       //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_002_src0_data),                       //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (PLL_c0_clk),                                                                                 //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                                      //          .valid
		.src_data            (cmd_mux_003_src_data),                                                                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                                //          .endofpacket
		.sink0_ready         (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //          .valid
		.src_data            (cmd_mux_005_src_data),                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                        //          .channel
		.sink0_data          (cmd_demux_src5_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                        //          .channel
		.sink0_data          (cmd_demux_src8_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                        //          .channel
		.sink0_data          (cmd_demux_src9_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                    //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                    //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                       //          .channel
		.sink0_data          (cmd_demux_src12_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                    //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux_013 cmd_mux_013 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                       //          .channel
		.sink0_data          (cmd_demux_src13_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                      //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                    //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                       //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                       //          .channel
		.sink0_data          (cmd_demux_src14_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                    //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_mux_015 cmd_mux_015 (
		.clk                 (PLL_c0_clk),                                                              //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                                   //          .valid
		.src_data            (cmd_mux_015_src_data),                                                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                                                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                           //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_001 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_002 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //      sink.ready
		.sink_channel       (router_005_src_channel),                        //          .channel
		.sink_data          (router_005_src_data),                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                          //      sink.ready
		.sink_channel       (router_006_src_channel),                        //          .channel
		.sink_data          (router_006_src_data),                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_004 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_005 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_006 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_007 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_008 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_009 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_010 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_011 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_012 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_rsp_demux_013 rsp_demux_013 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //      sink.ready
		.sink_channel       (router_016_src_channel),                        //          .channel
		.sink_data          (router_016_src_data),                           //          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_016_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_013_src1_data),                       //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_cmd_demux_002 rsp_demux_014 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_rsp_demux_015 rsp_demux_015 (
		.clk                (PLL_c0_clk),                                    //       clk.clk
		.reset              (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_015_src1_data),                       //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (PLL_c0_clk),                                                                                 //       clk.clk
		.reset                (EV19_Core_0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                                          //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                                          //          .valid
		.src_data             (rsp_mux_src_data),                                                                           //          .data
		.src_channel          (rsp_mux_src_channel),                                                                        //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                                  //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                                    //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                                       //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                                       //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                                     //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                                        //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                                               //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                                                 //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                                   //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                                   //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                                                 //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                                    //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                                           //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                                             //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                                   //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                                   //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                                 //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                                    //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                           //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                             //          .endofpacket
		.sink3_ready          (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid          (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink3_channel        (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink3_data           (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_data),          //          .data
		.sink3_startofpacket  (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket    (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                                   //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                                   //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                                                 //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                                    //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                                           //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                                             //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                                   //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                                   //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                                 //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                                    //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                           //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                             //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                                   //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                                   //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                                 //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                                    //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                           //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                             //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                                   //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                                   //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                                 //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                                    //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                           //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                             //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                                   //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                                   //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                                                 //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                                    //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                                           //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                                             //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                                   //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                                   //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                                                 //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                                    //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                                           //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                                             //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                                   //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                                   //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                                                 //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                                    //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                                           //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                                             //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                                   //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                                   //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                                                 //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                                    //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                                           //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                                             //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                                   //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                                   //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                                                 //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                                    //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                                           //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                                             //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                                                   //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                                                   //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                                                 //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                                    //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                                           //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                                             //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                                                   //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                                                   //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                                                 //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                                    //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                                           //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                                             //          .endofpacket
		.sink15_ready         (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_ready),                            //    sink15.ready
		.sink15_valid         (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_valid),                            //          .valid
		.sink15_channel       (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_channel),                          //          .channel
		.sink15_data          (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_data),                             //          .data
		.sink15_startofpacket (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_startofpacket),                    //          .startofpacket
		.sink15_endofpacket   (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_endofpacket)                       //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                         //          .valid
		.src_data            (rsp_mux_001_src_data),                          //          .data
		.src_channel         (rsp_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_015_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_015_src1_valid),                      //          .valid
		.sink0_channel       (rsp_demux_015_src1_channel),                    //          .channel
		.sink0_data          (rsp_demux_015_src1_data),                       //          .data
		.sink0_startofpacket (rsp_demux_015_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_015_src1_endofpacket)                 //          .endofpacket
	);

	EV19_SoC_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (PLL_c0_clk),                                    //       clk.clk
		.reset               (EV19_Core_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                         //          .valid
		.src_data            (rsp_mux_002_src_data),                          //          .data
		.src_channel         (rsp_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_013_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.sink0_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.sink0_data          (rsp_demux_013_src1_data),                       //          .data
		.sink0_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_013_src1_endofpacket)                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (53),
		.OUT_PKT_BURST_SIZE_L          (51),
		.OUT_PKT_RESPONSE_STATUS_H     (77),
		.OUT_PKT_RESPONSE_STATUS_L     (76),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (55),
		.OUT_PKT_BURST_TYPE_L          (54),
		.OUT_PKT_ORI_BURST_SIZE_L      (78),
		.OUT_PKT_ORI_BURST_SIZE_H      (80),
		.OUT_ST_DATA_W                 (81),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter (
		.clk                  (PLL_c0_clk),                                                                                 //       clk.clk
		.reset                (EV19_Core_0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                                                       //      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                                                     //          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                                               //          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                                                 //          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                                                       //          .ready
		.in_data              (cmd_demux_src3_data),                                                                        //          .data
		.out_endofpacket      (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ev19_core_0_data_master_to_vga_char_buffersource_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (PLL_c0_clk),                                                              //       clk.clk
		.reset                (EV19_Core_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_demux_src15_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_src15_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_src15_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_src15_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_src15_ready),                                                   //          .ready
		.in_data              (cmd_demux_src15_data),                                                    //          .data
		.out_endofpacket      (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ev19_core_0_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (50),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (53),
		.IN_PKT_BURST_SIZE_L           (51),
		.IN_PKT_RESPONSE_STATUS_H      (77),
		.IN_PKT_RESPONSE_STATUS_L      (76),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (55),
		.IN_PKT_BURST_TYPE_L           (54),
		.IN_PKT_ORI_BURST_SIZE_L       (78),
		.IN_PKT_ORI_BURST_SIZE_H       (80),
		.IN_ST_DATA_W                  (81),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter (
		.clk                  (PLL_c0_clk),                                                                                 //       clk.clk
		.reset                (EV19_Core_0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                                   //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                                                 //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                                             //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                                   //          .ready
		.in_data              (rsp_demux_003_src0_data),                                                                    //          .data
		.out_endofpacket      (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_char_buffersource_slave_to_ev19_core_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter (
		.clk                  (PLL_c0_clk),                                                              //       clk.clk
		.reset                (EV19_Core_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (rsp_demux_015_src0_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_015_src0_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_015_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_015_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_015_src0_ready),                                                //          .ready
		.in_data              (rsp_demux_015_src0_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_ev19_core_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_adc_slave_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (adc_adc_slave_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (adc_adc_slave_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                  //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (PLL_c0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (keyboard_avalon_ps2_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (keyboard_avalon_ps2_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (keyboard_avalon_ps2_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                     //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (PLL_c0_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (vga_char_buffer_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (vga_char_buffer_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (vga_char_buffer_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                         //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (PLL_c0_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (vga_char_buffersource_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (vga_char_buffersource_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (vga_char_buffersource_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                       //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (id_control_slave_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (id_control_slave_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (id_control_slave_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (PLL_c0_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (performance_counter_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (performance_counter_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (performance_counter_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                             //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (PLL_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (vga_pixel_buffer_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (vga_pixel_buffer_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (vga_pixel_buffer_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                  //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pll_pll_slave_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (pll_pll_slave_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (pll_pll_slave_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (PLL_c0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (vga_rgb_resampler_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (vga_rgb_resampler_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (vga_rgb_resampler_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                   //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dip_switch_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (dip_switch_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (dip_switch_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (push_button_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (push_button_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (push_button_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rom_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (rom_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (rom_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ram_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (ram_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (ram_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)              //         .error
	);

	EV19_SoC_mm_interconnect_0_avalon_st_adapter_015 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (EV19_Core_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)              //         .error
	);

endmodule
